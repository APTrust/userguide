{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to APTrust The Academic Preservation Trust (APTrust) is a distributed digital preservation repository committed to preserving the digital heritage of its depositors. APTrust services are open to sustaining members (who pay an annual fee directly to us) and to sub-accounts created by sustaining members. Before You Get Started Assuming you are already either a sustaining member, or have been added as a sub-account by a sustaining member, the process for getting started looks like this: You send the following information to help@aptrust.org : The name , email address , and phone number of a person at your organization who will act as your APTrust administrator. We prefer that you send a mobile number so you can use two-factor authentication. Your institution's domain name . (For example, virginia.edu.) We'll reply to your email with the following: Information on how to log in to your Registry account. Registry is our online registry, showing what you have deposited with APTrust and exposing the features you'll need to restore, delete, query, and audit your materials. A set of AWS credentials that you'll use to upload matierials to our system. First Steps Once your local administrator has access to Registry, they can add new users and/or adminstrators for your institution. Registry users have access to all features except: Adding and deactivating user accounts. Approving requests to delete materials from the repository. Registry administrators can do both of the above. If you're new to APTrust, you will likely start out by using our demo system to fine-tune your ingest workflows. Once you are able to push materials successfully into the demo repository, you can begin using the production system.","title":"Home"},{"location":"#welcome-to-aptrust","text":"The Academic Preservation Trust (APTrust) is a distributed digital preservation repository committed to preserving the digital heritage of its depositors. APTrust services are open to sustaining members (who pay an annual fee directly to us) and to sub-accounts created by sustaining members.","title":"Welcome to APTrust"},{"location":"#before-you-get-started","text":"Assuming you are already either a sustaining member, or have been added as a sub-account by a sustaining member, the process for getting started looks like this: You send the following information to help@aptrust.org : The name , email address , and phone number of a person at your organization who will act as your APTrust administrator. We prefer that you send a mobile number so you can use two-factor authentication. Your institution's domain name . (For example, virginia.edu.) We'll reply to your email with the following: Information on how to log in to your Registry account. Registry is our online registry, showing what you have deposited with APTrust and exposing the features you'll need to restore, delete, query, and audit your materials. A set of AWS credentials that you'll use to upload matierials to our system.","title":"Before You Get Started"},{"location":"#first-steps","text":"Once your local administrator has access to Registry, they can add new users and/or adminstrators for your institution. Registry users have access to all features except: Adding and deactivating user accounts. Approving requests to delete materials from the repository. Registry administrators can do both of the above. If you're new to APTrust, you will likely start out by using our demo system to fine-tune your ingest workflows. Once you are able to push materials successfully into the demo repository, you can begin using the production system.","title":"First Steps"},{"location":"contact_us/","text":"Contact APTrust For technical problems and help with your account, contact help@aptrust.org . To keep up with what's going on, join the APTrust community mailing list or drop in to one of our Slack channels: aptrust_community contains general information for all members bagging provides community support for bagging issues Want to report a bug or request a new feature? Open a Trello ticket, or write us at help@aptrust.org .","title":"Contact Us"},{"location":"contact_us/#contact-aptrust","text":"For technical problems and help with your account, contact help@aptrust.org . To keep up with what's going on, join the APTrust community mailing list or drop in to one of our Slack channels: aptrust_community contains general information for all members bagging provides community support for bagging issues Want to report a bug or request a new feature? Open a Trello ticket, or write us at help@aptrust.org .","title":"Contact APTrust"},{"location":"glossary/","text":"Core Concepts Before proceeding with this documentation, we'd like to clarify a few core concepts and essential terms. Generic File A single file or bitstream that makes up part of an intellectual object. For example, in a collection of jpeg photos that includes an XML metadata file, each jpeg and the XML file is a generic file. Intellectual Object A collection of generic files logically grouped into a single unit. An intellectual object typically consists of the payload files and tag files submitted in a bag. Registry Registry is the searchable online registry that keeps track of everything you've deposited in APTrust. It includes a web UI and a REST API that enable you to do the following: See what items you've deposited Search for items by object name, file name, and a number of other attributes View audit data (PREMIS events) for items you've deposited Request that objects and/or files be restored Request that objects and/or files be deleted (Does the REST API support this?) Query the status of ingest and restoration requests in progress Add and remove user accounts for your institution Registry includes both a demo and production system. The demo system is for depositors to test new workflows and to get familiar with the system's general features. The production system is for long-term preservation. Registry Demo URL : https://demo.aptrust.org Registry Production URL : https://repo.aptrust.org API Keys and Separate Systems Once you have a valid Registry login, you can generate your own API key to use the REST API. [Link when available...] Keep in mind that while your login email may be the same for both the demo and production Registry systems, your API keys will be different. Receiving Bucket APTrust provides two receiving buckets for each depositor: one for the demo environment and one for the production environment. A receiving bucket is an Amazon AWS S3 bucket to which you upload materials for ingest into APTrust. Upload bags to your demo receiving bucket to ingest them into the demo system, and to the production bucket to ingest them into the production system. Receiving bucket names follow this pattern: Demo System : aptrust.receiving.test.<your-domain.xyx> Production System : aptrust.receiving.<your-domain.xyz> For example, if your domain name is example.org, your receiving buckets will be aptrust.receiving.test.example.or for demo and aptrust.receiving.example.org for production. Restoration Bucket When you ask for APTrust to restore an object, our system reassembles all of the object's files into a BagIt bag and copies it to your receiving bucket. (Individual files can be restored the same way, though they are not bagged.) The restoration process may take anywhere from a few seconds to several hours, depending on the amount of data restored and where it is stored. Once the restoration is complete, you can download the restore object or files from your restoration bucket. You Need AWS Access Keys to Use Your Buckets! You will need to get AWS credentials from APTrust to access your receiving and restoration buckets. APTrust sends them as part of the onboarding process when you first set up your account. If you need credentials, contact help@aptrust.org . DART DART is the Digital Archivist's Resource Tool. The initial release of DART 2.0 provides a drag-and-drop interface for bagging files and sending them to APTrust. DART is the easiest way to complete your first APTrust Deposit. To get started with DART, visit https://aptrust.github.io/dart-docs/users/getting_started/ .","title":"Glossary"},{"location":"glossary/#core-concepts","text":"Before proceeding with this documentation, we'd like to clarify a few core concepts and essential terms.","title":"Core Concepts"},{"location":"glossary/#generic-file","text":"A single file or bitstream that makes up part of an intellectual object. For example, in a collection of jpeg photos that includes an XML metadata file, each jpeg and the XML file is a generic file.","title":"Generic File"},{"location":"glossary/#intellectual-object","text":"A collection of generic files logically grouped into a single unit. An intellectual object typically consists of the payload files and tag files submitted in a bag.","title":"Intellectual Object"},{"location":"glossary/#registry","text":"Registry is the searchable online registry that keeps track of everything you've deposited in APTrust. It includes a web UI and a REST API that enable you to do the following: See what items you've deposited Search for items by object name, file name, and a number of other attributes View audit data (PREMIS events) for items you've deposited Request that objects and/or files be restored Request that objects and/or files be deleted (Does the REST API support this?) Query the status of ingest and restoration requests in progress Add and remove user accounts for your institution Registry includes both a demo and production system. The demo system is for depositors to test new workflows and to get familiar with the system's general features. The production system is for long-term preservation. Registry Demo URL : https://demo.aptrust.org Registry Production URL : https://repo.aptrust.org API Keys and Separate Systems Once you have a valid Registry login, you can generate your own API key to use the REST API. [Link when available...] Keep in mind that while your login email may be the same for both the demo and production Registry systems, your API keys will be different.","title":"Registry"},{"location":"glossary/#receiving-bucket","text":"APTrust provides two receiving buckets for each depositor: one for the demo environment and one for the production environment. A receiving bucket is an Amazon AWS S3 bucket to which you upload materials for ingest into APTrust. Upload bags to your demo receiving bucket to ingest them into the demo system, and to the production bucket to ingest them into the production system. Receiving bucket names follow this pattern: Demo System : aptrust.receiving.test.<your-domain.xyx> Production System : aptrust.receiving.<your-domain.xyz> For example, if your domain name is example.org, your receiving buckets will be aptrust.receiving.test.example.or for demo and aptrust.receiving.example.org for production.","title":"Receiving Bucket"},{"location":"glossary/#restoration-bucket","text":"When you ask for APTrust to restore an object, our system reassembles all of the object's files into a BagIt bag and copies it to your receiving bucket. (Individual files can be restored the same way, though they are not bagged.) The restoration process may take anywhere from a few seconds to several hours, depending on the amount of data restored and where it is stored. Once the restoration is complete, you can download the restore object or files from your restoration bucket. You Need AWS Access Keys to Use Your Buckets! You will need to get AWS credentials from APTrust to access your receiving and restoration buckets. APTrust sends them as part of the onboarding process when you first set up your account. If you need credentials, contact help@aptrust.org .","title":"Restoration Bucket"},{"location":"glossary/#dart","text":"DART is the Digital Archivist's Resource Tool. The initial release of DART 2.0 provides a drag-and-drop interface for bagging files and sending them to APTrust. DART is the easiest way to complete your first APTrust Deposit. To get started with DART, visit https://aptrust.github.io/dart-docs/users/getting_started/ .","title":"DART"},{"location":"old_partner_tools/","text":"Partner Tools Warning This page describes the old version 2 partner tools, which are now deprecated. Please see the docs for the new, version 3 partner tools , which add support for creating bags and interacting with the APTrust Registry. Deprecated version 2 command line tools for Mac, Linux, and Windows are available through the links below: OSX Intel 64-bit, v 2.2-beta OSX M1 & M2, v2.2-beta Linux 64-bit, v 2.2-beta Windows 64-bit, v 2.2-beta Each of these tools returns specific exit codes, so you can integrate them into your scripts. You can view any program's built-in documentation by passing the --help flag. List of Partner Tools In addition to our graphical tool for bagging and uploading, DART , APTrust also distributes a suite of command-line tools. These tools use less memory and generally less CPU than DART. They include: Tool Description apt_check_ingest Queries Pharos to check the ingest status of a bag. This requires a Pharos API key. See the configuration section below. apt_validate Validates bags (tarred or untarred) before uploading them for ingest or after downloading them from the restoration bucket. apt_upload Uploads bags to your receiving buckets for ingest. Requires AWS keys be present in your config file. See below. apt_list Lists the contents of your receiving and restoration buckets. Requires AWS keys. apt_download Downloads restored bags from your restoration buckets. Requires AWS keys. apt_delete Deletes restored bags from your restoration buckets. Requires AWS keys. Note that each of these tools has a --help option to display available flags, output formats, and return codes. Configuration File All of the tools except apt_validate require a simple config file with five name-value pairs. Note that quotes are optional, and comment lines begin with a hash mark. # Config for apt_upload and apt_download AwsAccessKeyId = 123456789XYZ AwsSecretAccessKey = THIS KEY INCLUDES SPACES AND DOES NOT NEED QUOTES ReceivingBucket = 'aptrust.receiving.universityname.edu' RestorationBucket = \"aptrust.restore.universityname.edu\" DownloadDir = \"/home/josie/downloads\" AptrustApiUser = \"archivist@example.edu\" AptrustApiKey = \"f887afc5e1624eda92ae1a5aecdf210c\" If you prefer not to put your AWS keys in the config file, you can put them into environment variables called AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY . The config file should include the following variables: ReceivingBucket : The name of the S3 bucket that will hold your uploaded APTrust bags that are awaiting ingest. E.g. aptrust.receiving.college.edu . RestorationBucket : The name of the S3 bucket that will hold your restored APTrust bags. E.g. aptrust.restore.college.edu . DownloadDir : The local directory in which to save files downloaded from your APTrust restoration bucket. The APTrust config currently does not expand ~ to your home directory, so use an absolute path to be safe. AptrustApiUser : The email address for logging in to APTrust's Pharos REST API. AptrustApiKey : Your API key for the Pharos REST API. This key must match the user email. (That is, joe@example.com cannot log in with a key that was issued to beth@example.com .) If you save your config file as ~/.aptrust_partner.conf in Linux/Mac or as %HOMEPATH%\\.aptrust_partner.conf under Windows, you will not have to specify a --config option when you run the tools. Otherwise, run the tools with the --config file pointing to the full path of your configuration file. Below is a screenshot of apt_list showing the contents of an AWS receiving bucket. apt_check_ingest shows the ingest status of items that match a specified file name.","title":"Old Partner Tools"},{"location":"old_partner_tools/#partner-tools","text":"Warning This page describes the old version 2 partner tools, which are now deprecated. Please see the docs for the new, version 3 partner tools , which add support for creating bags and interacting with the APTrust Registry. Deprecated version 2 command line tools for Mac, Linux, and Windows are available through the links below: OSX Intel 64-bit, v 2.2-beta OSX M1 & M2, v2.2-beta Linux 64-bit, v 2.2-beta Windows 64-bit, v 2.2-beta Each of these tools returns specific exit codes, so you can integrate them into your scripts. You can view any program's built-in documentation by passing the --help flag.","title":"Partner Tools"},{"location":"old_partner_tools/#list-of-partner-tools","text":"In addition to our graphical tool for bagging and uploading, DART , APTrust also distributes a suite of command-line tools. These tools use less memory and generally less CPU than DART. They include: Tool Description apt_check_ingest Queries Pharos to check the ingest status of a bag. This requires a Pharos API key. See the configuration section below. apt_validate Validates bags (tarred or untarred) before uploading them for ingest or after downloading them from the restoration bucket. apt_upload Uploads bags to your receiving buckets for ingest. Requires AWS keys be present in your config file. See below. apt_list Lists the contents of your receiving and restoration buckets. Requires AWS keys. apt_download Downloads restored bags from your restoration buckets. Requires AWS keys. apt_delete Deletes restored bags from your restoration buckets. Requires AWS keys. Note that each of these tools has a --help option to display available flags, output formats, and return codes.","title":"List of Partner Tools"},{"location":"old_partner_tools/#configuration-file","text":"All of the tools except apt_validate require a simple config file with five name-value pairs. Note that quotes are optional, and comment lines begin with a hash mark. # Config for apt_upload and apt_download AwsAccessKeyId = 123456789XYZ AwsSecretAccessKey = THIS KEY INCLUDES SPACES AND DOES NOT NEED QUOTES ReceivingBucket = 'aptrust.receiving.universityname.edu' RestorationBucket = \"aptrust.restore.universityname.edu\" DownloadDir = \"/home/josie/downloads\" AptrustApiUser = \"archivist@example.edu\" AptrustApiKey = \"f887afc5e1624eda92ae1a5aecdf210c\" If you prefer not to put your AWS keys in the config file, you can put them into environment variables called AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY . The config file should include the following variables: ReceivingBucket : The name of the S3 bucket that will hold your uploaded APTrust bags that are awaiting ingest. E.g. aptrust.receiving.college.edu . RestorationBucket : The name of the S3 bucket that will hold your restored APTrust bags. E.g. aptrust.restore.college.edu . DownloadDir : The local directory in which to save files downloaded from your APTrust restoration bucket. The APTrust config currently does not expand ~ to your home directory, so use an absolute path to be safe. AptrustApiUser : The email address for logging in to APTrust's Pharos REST API. AptrustApiKey : Your API key for the Pharos REST API. This key must match the user email. (That is, joe@example.com cannot log in with a key that was issued to beth@example.com .) If you save your config file as ~/.aptrust_partner.conf in Linux/Mac or as %HOMEPATH%\\.aptrust_partner.conf under Windows, you will not have to specify a --config option when you run the tools. Otherwise, run the tools with the --config file pointing to the full path of your configuration file. Below is a screenshot of apt_list showing the contents of an AWS receiving bucket. apt_check_ingest shows the ingest status of items that match a specified file name.","title":"Configuration File"},{"location":"partner_tools/","text":"APTrust Partner Tools The aptrust command-line utility (apt-cmd, aka Partner Tools) enables you to create and validate bags, manage S3 files, and query data in the APTrust Registry. This tool replaces the older version 2.x partner tools which did not have bag creation features and worked only with Pharos. You can create workflows with apt-cmd that include: creating a bag validating the bag uploading the bag to an S3 bucket checking the APTrust registry to see when the bag was ingested retrieving object and file details, including checksums and PREMIS events, from the APTrust registry For bag creating and validation, the current release supports tarred bags only. Though access to the APTrust registry is limited to APTrust depositors, anyone can use apt-cmd's bagging and S3 features. Downloads Platform Architecture Version SHA-256 Windows Intel 64-bit v3.0.0-beta b12d7daf68ca2a2ea99ea208143e4571cf49fd8221ea1998a9b4f5db9774b631 Mac Intel Intel 64-bit v3.0.0-beta 1b5ceb015744e9ca818e5526f0940988fd4dad7f56c1bde105762bd89522265b Mac ARM Apple Silicon (M series) v3.0.0-beta 0327e04b44137ce856b342542563133b9f8184364513394013bf200939dd6c8e Linux Intel 64-bit v3.0.0-beta 88d13960e50478066a6426ffd49e4763feece4642b7420e0d2e4f8d9412e9c88 APTrust partner tools are open source, distributed under the BSD 2-clause license. The source code is available on github at https://github.com/APTrust/partner-tools . Help and Troubleshooting You can get help for any apt-cmd command using the --help flag. For example, apt-cmd --help shows the list of available commands. To get help with a specific command, try apt-cmd [command] --help . For example, apt-cmd bag create --help . All operations support the --debug flag. When supplied, apt-cmd will print out additional detailed information about what it's doing. Exit Codes The apt-cmd tool returns consistent exit codes for all operations. If you're using apt-cmd in scripts, check the exit code of each call to ensure it succeeded. An exit code of 0 (zero) indicates the call succeeded. A non-zero exit code means the call failed. Code Meaning 0 The operation completed without errors. 1 The operation failed due to a runtime error. Causes may include a network error, full disk, lack of file permissions, etc. 2 The bag you validated turned out to be invalid. Check the error output for details. 3 The operation failed due to a user error. This is almost always caused by missing or invalid command-line parameters, or missing/invalid configuration settings. 4 The operation did not complete because an external service responded with an error. Common causes including passing bad authentication values to the APTrust registry or the remote S3 service, requesting an object that doesn't exist, and requesting an item you're not authorized to access. Creating a Bag You can create bags that conform to the APTrust, BTR or empty BagIt profile. If you specify the empty profile, apt-cmd will create a valid bag with the tags and manifests you specify. The example below demonstrates how to speficy flags and tag values. For tag values, use the format \"filename.txt/Tag-Name=tag value\". If you omit the file name, it defaults to bag-info.txt. For example, the following two tags will both be written into the Source-Organization tag in bag-info.txt: --tags=\"bag-info.txt/Source-Organization=Faber College\" --tags=\"Source-Organization=Faber College\" Note that tag values are quoted in their entirety, both the name and the value. Apply double quotes to values containing special characters such as spaces and symbols and to values containing environment variables that you want to expand, such as \"$HOME\". Apply single quotes to values containing symbols that you don't want the shell to expand, such as curly braces, ampersands, and random dollar signs. You can specify any tag files and tag names you want. The following example packages the directory /home/josie/photos according to the APTrust BagIt profile and writes the tarred bag into /home/josie/bags/photos.tar. This bag will include md5 and sha256 manifests and tag manifests. It will also include the specified tags in the bag-info.txt and aptrust-info.txt tag files. apt-cmd bag create \\ --profile = aptrust \\ --manifest-algs = 'md5,sha256' \\ --output-file = '/home/josie/bags/photos.tar' \\ --bag-dir = '/home/josie/photos' \\ --tags = 'aptrust-info.txt/Title=My Bag of Photos' \\ --tags = 'aptrust-info.txt/Access=Institution' \\ --tags = 'aptrust-info.txt/Storage-Option=Standard' \\ --tags = 'bag-info.txt/Source-Organization=Faber College' \\ --tags = 'Custom-Tag=Single quoted because it {contains} $weird &characters' Troubleshooting Use the --debug flag to get the program to tell what it thinks it's supposed to be doing. If you use backslashes, as in the example able, be sure there are no trailing spaces or any characters other than a newline following the backslash. Limitations This tool currently supports only APTrust, BTR, and empty/generic BagIt profiles. For now, all bags will be output as tar files. This tool currently supports only the md5, sha1, sha256, and sha512 algorithms for manifests and tag manifests. This tool currently will not generate a fetch.txt file. Validating a Bag Currently, apt-cmd validates only tarred bags. The following commands validate a bag according to the APTrust BagIt profile: apt-cmd bag validate my_bag.tar apt-cmd bag validate -p aptrust my_bag.tar To validate a bag using the Beyond the Repository (BTR) profile: apt-cmd bag validate -p btr my_bag.tar To validate a bag using the empty profile: apt-cmd bag validate -p empty my_bag.tar The empty profile simply ensures the bag is valid according to the general BagIt specification. Limitations The validator only works with tarred bags and will not validate fetch.txt files. S3 Commands apt-cmd can upload to and download from any service with an S3-compliant API. It can also list bucket contents in JSON or text formats, and delete items from S3. To access S3 services, you'll need to S3 credentials, as specified in the Configuration Settings section below. Uploading a File to an S3 Bucket apt-cmd can upload a file to any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag. Examples Upload file photo.jpg to Amazon's S3 service: apt-cmd s3 upload --host = s3.amazonaws.com --bucket = \"my-bucket\" photo.jpg Upload the same file, but call it renamed.jpg in S3: apt-cmd s3 upload --host = s3.amazonaws.com \\ --bucket = \"my-bucket\" \\ --key = 'renamed.jpg' \\ photo.jpg Listing the Contents of an S3 Bucket You can list files from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag. List output is in JSON format, unless you specify --format=text . Examples List items in my_bucket with prefix \"photo\": apt-cmd s3 list --host = s3.amazonaws.com --bucket = my_bucket --prefix = photo List 10 items in my_bucket with prefix \"photo\", using plain text output: apt-cmd s3 list --host = s3.amazonaws.com \\ --bucket = my_bucket \\ --prefix = photo \\ --maxitems = 10 \\ --format = text Downloading an S3 File You can download files from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag. Examples Download a file from Amazon's S3 service into the current directory: apt-cmd s3 download --host = s3.amazonaws.com --bucket = \"my-bucket\" --key = 'photo_001.jpg' Download the same file and save it with a custom name on your desktop: apt-cmd s3 download --host = s3.amazonaws.com \\ --bucket = \"my-bucket\" \\ --key = 'photo_001.jpg' \\ --save-as = \" $HOME /Desktop/vacation.jpg\" Deleting an S3 File You can delete objects from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag. Example Delete object photo.jpg from my-bucket on AWS S3: apt-cmd s3 delete --host = s3.amazonaws.com --bucket = \"my-bucket\" --key = 'photo.jpg' Note: This returns exit status zero and '{ \"result\": \"OK\" }' if the key is successfully deleted or if the key wasn't in the bucket to begin with. Registry Commands Registry commands retrieve information from the APTrust registry. You'll need APTrust credentials to query the Registry. See Configuration Settings below for info on how to pass these credentials to apt-cmd. Listing Registry Work Items List work items from the APTrust registry, or run a special \"quick report.\" You'll typically want to list work items so you can track the progress of an ingest or restoration. Note that when filtering Work Items, Objects or Files using any of the list commands, you can supply filters as name-value pairs on the command line. These pairs do not use the double-dash (--) prefix . Examples List recent ingests: apt-cmd registry list workitems action = 'Ingest' sort = 'date_processed__desc' List all work items since April 6, 2023: apt-cmd registry list workitems date_processed__gteq = '2023-04-06' sort = 'date_processed__desc' List failed work items: apt-cmd registry list workitems status = 'Failed' sort = 'date_processed__desc' List work items pertaining to a tar file you uploaded: apt-cmd registry list workitems name = 'bag-of-photos.tar' List work items pertaining to a bag with a specific etag: apt-cmd registry list workitems etag = '987654321-100' List work items pertaining to a specific intellectual object: apt-cmd registry list workitems object_identifier = 'test.edu/TestBag' List restorations or deletions of a specific file: apt-cmd registry list workitems generic_file_identifier = 'test.edu/TestBag/data/photo1.jpg' Quick Reports List all items from the past 30 days that are still in process: apt-cmd registry list workitems --report = inprocess List all items from the past 30 days that failed or were cancelled: apt-cmd registry list workitems --report = problems List all restorations from the past 30 days: apt-cmd registry list workitems --report = restorations When running quick reports, this tool ignores all other query params. WorkItem List Filter Options When querying for Work Items, apt-cmd supports the following filter options: Name DataType Description action string The action, one of: Delete, Restore Object, Restore File, Glacier Restore, Ingest action__in string You can specify this multiple times to get results that include any of the named actions. For example, to get work items pertaining to any type of restoration, specify action_in=\"Restore Object\" action_in=\"Restore File\" action_in=\"Glacier Restore\" alt_identifier string Return work items pertaining to objects with this alternate identifier. bag_date__gteq date string 'yyyy-mm-dd' Return work items pertaining to bags created on or after this date. bag_date__lteq date string 'yyyy-mm-dd' Return work items pertaining to bags created on or before this date. bag_group_identifier string Return work items pertaining to bags having this bag group identifier. (Exact match only. Group identifier prefixes won't work here.) bagit_profile_identifier string Return work items pertaining to bags having this BagIt profile identifier. Allowed values are https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json (for the BTR profile), and https://raw.githubusercontent.com/APTrust/preservation-services/master/profiles/aptrust-v2.2.json (for the APTrust profile). date_processed__gteq date string 'yyyy-mm-dd' Return items last touched by a worker process on or after this date. date_processed__lteq date string 'yyyy-mm-dd' Return items last touched by a worker process on or before this date. etag string Return work items pertaining to an uploaded bag with this etag. generic_file_id integer Return work items pertaining to this generic file. generic_file_id__is_null string Set this to \"true\" to retrieve work items with an empty generic file identifier. Results will include only object-level work items, such as ingests, object deletions and object restorations. generic_file_identifier string Return work items pertaining to the generic file with this identifier. intellectual_object_id integer Return work items pertaining to this intellectual object. Note that for ingests, the object id will be empty until the ingest completes. intellectual_object_id__is_null string Set this to \"true\" to include work items with an empty intellectual object id. This will return ingests that have not yet completed. All other work items are associated with an object. name string The name of the tar file you want to check on. This is the name of the file you uploaded to your receiving bucket for ingest. For example, \"virginia.edu/bag-of-photos.tar\". needs_admin_review string Set this to \"true\" if you want to retrieve work items that have been flagged as problematic, requiring review from an APTrust administrator. node__is_null string Set this to \"true\" to retrieve work items with a null worker node. These items are currently not being worked on by any process. Items are in this state when awaiting processing and when processing has completed. node__not_null string Set this to \"true\" to retrieve items that are undergoing active processing by an ingest, restoration or deletion worker. object_identifier string Return items associated with this intellectual object identifier. queued_at__is_null date string 'yyyy-mm-dd' Return items queued for work on or after this date. queued_at__not_null date string 'yyyy-mm-dd' Return items queued for work on or before this date. retry string Set this to \"true\" to retrieve items that are eligible for processing. Set to \"false\" to retrieve problematic items that either will not be retried or require manually requeueing. size__gteq integer Return work items associated with files or objects containing at least this number of bytes. size__lteq integer Return work items associated with files or objects containing no more than this number of bytes. stage string Return items in this stage of processing. Allowed values: Available in S3, Cleanup, Copy To Staging, Fetch, Format Identification, Package, Receive, Record, Reingest Check, Requested, Resolve, Restoring, Storage Validation, Store, Unpack, Validate. stage__in string Specify this filter multiple times to retrieve items in any one of a number of stages. For example, to retrieve items in the Store, Unpack, or Validate stages, use stage__in=Store stage__in=Unpack stage_in=Validate status string Retrieve items having this status. Values include Cancelled, Failed, Pending, Started, Success, Suspended. status__in string Specify this filter multiple times to retrieve items having any of a number of statuses. For example, to retrieve items with Pending and Started status, use status__in=Pending status__in=Started . storage_option string Retrieve items pertaining to objects or files having the specified storage option. Available values : Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA user string (email address) Return work items initiated by the user with this email address. WorkItem List Paging and Sort Options By default, the list workitems command returns the first 25 results, sorting items by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=name sorts by the name of the tar file, while sort=name__desc does a reverse sort by name. WorkItem List Response Format The workitem list command returns JSON in the following format. Note that count indicates the total number of results, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"action\" : \"Delete\" , \"alt_identifier\" : \"string\" , \"aptrust_approver\" : \"user@example.com\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"bag_date\" : \"2023-04-20T17:34:07.911Z\" , \"bag_group_identifier\" : \"string\" , \"bucket\" : \"string\" , \"created_at\" : \"2023-04-20T17:34:07.911Z\" , \"date_processed\" : \"2023-04-20T17:34:07.911Z\" , \"etag\" : \"string\" , \"generic_file_id\" : 0 , \"generic_file_identifier\" : \"string\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"inst_approver\" : \"user@example.com\" , \"intellectual_object_id\" : 0 , \"internal_sender_identifier\" : \"string\" , \"name\" : \"string\" , \"needs_admin_review\" : true , \"node\" : \"string\" , \"note\" : \"string\" , \"object_identifier\" : \"string\" , \"outcome\" : \"Failure\" , \"pid\" : 0 , \"queued_at\" : \"2023-04-20T17:34:07.911Z\" , \"retry\" : true , \"size\" : 0 , \"source_organization\" : \"string\" , \"stage\" : \"Available in S3\" , \"stage_started_at\" : \"2023-04-20T17:34:07.912Z\" , \"status\" : \"Cancelled\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"updated_at\" : \"2023-04-20T17:34:07.912Z\" , \"user\" : \"user@example.com\" } ] } Retrieving a Single Registry Work Item To retrieve a single WorkItem record from the APTrust Registry, use the command below. Note that id is an integer. apt-cmd registry get workitem <id> WorkItem Get Response Format The command aptrust registry get workitem returns JSON in the following format: { \"id\" : 0 , \"action\" : \"Restore Object\" , \"alt_identifier\" : \"string\" , \"aptrust_approver\" : \"user@example.com\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"bag_date\" : \"2023-04-20T17:45:43.969Z\" , \"bag_group_identifier\" : \"string\" , \"bucket\" : \"string\" , \"created_at\" : \"2023-04-20T17:45:43.970Z\" , \"date_processed\" : \"2023-04-20T17:45:43.970Z\" , \"etag\" : \"string\" , \"generic_file_id\" : 0 , \"generic_file_identifier\" : \"string\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"inst_approver\" : \"user@example.com\" , \"intellectual_object_id\" : 0 , \"internal_sender_identifier\" : \"string\" , \"name\" : \"string\" , \"needs_admin_review\" : true , \"node\" : \"string\" , \"note\" : \"string\" , \"object_identifier\" : \"string\" , \"outcome\" : \"Success\" , \"pid\" : 0 , \"queued_at\" : \"2023-04-20T17:45:43.970Z\" , \"retry\" : true , \"size\" : 0 , \"source_organization\" : \"string\" , \"stage\" : \"Available in S3\" , \"stage_started_at\" : \"2023-04-20T17:45:43.970Z\" , \"status\" : \"Cancelled\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"updated_at\" : \"2023-04-20T17:45:43.970Z\" , \"user\" : \"user@example.com\" } Listing Registry Objects You can list objects from the APTrust Registry, with filters. Examples List 20 objects ordered by identifer: apt-cmd registry list objects sort = 'identifier' per_page = '20' List 20 objects reverse ordered by identifer: apt-cmd registry list objects sort = 'identifier__desc' per_page = '20' List objects created after April 6, 2023 apt-cmd registry list files created_at__gteq = '2023-04-06' Object List Filter Options Name DataType Description access string Return objects with this access setting. Available values : consortia, institution, restricted alt_identifier string Return objects with this alternate identifier. alt_identifier__starts_with string Return objects whose alternate identifier starts with the speficied string. bag_group_identifier string Return objects with this bag group identifier. bag_group_identifier__starts_with string Return objects whose bag group identifier starts with the specified string. bagit_profile_identifier string Return objects with this BagIt profile identifier. Available values : https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json (BTR profile) and https://raw.githubusercontent.com/APTrust/preservation-services/master/profiles/aptrust-v2.2.json (APTrust profile). created_at__gteq date string 'yyyy-mm-dd' Return objects created on or after the given date. created_at__lteq date string 'yyyy-mm-dd' Return objects created on or before the given date. etag string Return the object with this etag. file_count__gteq integer Return objects containing at least this number of files. file_count__lteq integer Return objects containing no more than this number of files. identifier string Return the object with this identifier. internal_sender_identifier string Return the object with this internal sender identifier. size__gteq integer Return objects whose size is at least this number of bytes. size__lteq integer Return objects whose size is no more than this number of bytes. state string Return objects with this state. A = Active, D = Deleted. Available values: A, D. storage_option string Return objects with the specified storage option. Available values: Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA. updated_at__gteq date string 'yyyy-mm-dd' Return objects updated on or after the given timestamp. updated_at__lteq date string 'yyyy-mm-dd' Return objects updated on or before the given timestamp. Object List Paging and Sort Options By default, the list objects command returns the first 25 results, sorting objects by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=identifier sorts by the object identifier, while sort=identifier__desc does a reverse sort by identifier. Object List Response Format The list objects command returns JSON with the following format. Note that count is the total number of resuls matching your query, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"title\" : \"string\" , \"description\" : \"string\" , \"identifier\" : \"string\" , \"alt_identifier\" : \"string\" , \"access\" : \"consortia\" , \"bag_name\" : \"string\" , \"institution_id\" : 0 , \"created_at\" : \"2023-04-20T18:25:28.513Z\" , \"updated_at\" : \"2023-04-20T18:25:28.513Z\" , \"state\" : \"A\" , \"etag\" : \"string\" , \"bag_group_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"source_organization\" : \"string\" , \"internal_sender_identifier\" : \"string\" , \"internal_sender_description\" : \"string\" , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"institution_type\" : \"MemberInstitution\" , \"institution_parent_id\" : 0 , \"file_count\" : 0 , \"size\" : 0 , \"payload_file_count\" : 0 , \"payload_size\" : 0 } ] } Retrieving a Single Registry Object You can retrieve objects from the Registry by identifier or by id. Object identifiers are strings, such as 'example.edu/photos'. Ids are numeric. Examples apt-cmd registry get object identifier = <object_identifier> apt-cmd registry get object id = <object_id> Get Object Response Format The get object command returns JSON in the following format: { \"id\" : 0 , \"title\" : \"string\" , \"description\" : \"string\" , \"identifier\" : \"string\" , \"alt_identifier\" : \"string\" , \"access\" : \"consortia\" , \"bag_name\" : \"string\" , \"institution_id\" : 0 , \"created_at\" : \"2023-04-20T18:52:35.412Z\" , \"updated_at\" : \"2023-04-20T18:52:35.412Z\" , \"state\" : \"A\" , \"etag\" : \"string\" , \"bag_group_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"source_organization\" : \"string\" , \"internal_sender_identifier\" : \"string\" , \"internal_sender_description\" : \"string\" , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"institution_type\" : \"MemberInstitution\" , \"institution_parent_id\" : 0 , \"file_count\" : 0 , \"size\" : 0 , \"payload_file_count\" : 0 , \"payload_size\" : 0 } Listing Registry Files The list files command lists files from the APTrust Registry, applying whatever filters you specify. Note that the file JSON returned by this call includes only summary information for each file, while the get file call returns more detailed info. Examples List files belonging to object test.edu/my_bag, ordered by identifer: apt-cmd registry list files intellectual_object_identifier = 'test.edu/my_bag' sort = 'identifier' List only the first 10 files from that same bag: apt-cmd registry list files intellectual_object_identifier = 'test.edu/my_bag' sort = 'identifier' per_page = 10 List files created after April 6, 2023 apt-cmd registry list files created_at__gteq = '2023-04-06' File List Filter Options Name DataType Description created_at__gteq date string 'yyyy-mm-dd' Return files created on or after the given timestamp. created_at__lteq date string 'yyyy-mm-dd' Return files created on or before the given timestamp. identifier string Return the file with this identifier. intellectual_object_id integer Return files belonging to the specified intellectual object. last_fixity_check__gteq date string 'yyyy-mm-dd' Return files whose last fixity check was on or after the given timestamp. last_fixity_check__lteq date string 'yyyy-mm-dd' Return files whose last fixity check was on or before the given timestamp. size__gteq integer Return files whose size is at least this number of bytes. size__lteq integer Return files whose size is no more than this number of bytes. state string Return files with this state. A = Active, D = Deleted. Available values: A, D. storage_option string Return files with the specified storage option. Available values: Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA. updated_at__gteq date string 'yyyy-mm-dd' Return files updated on or after the given timestamp. updated_at__lteq date string 'yyyy-mm-dd' Return files updated on or before the given timestamp. File List Paging and Sort Options By default, the list files command returns the first 25 results, sorting files by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=identifier sorts by the file identifier, while sort=identifier__desc does a reverse sort by identifier. File List Response Format The list files command returns JSON with the following format. Note that count is the total number of resuls matching your query, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"file_format\" : \"string\" , \"size\" : 0 , \"identifier\" : \"string\" , \"intellectual_object_id\" : 0 , \"object_identifier\" : \"string\" , \"access\" : \"consortia\" , \"state\" : \"A\" , \"last_fixity_check\" : \"2023-04-20T18:55:14.164Z\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"md5\" : \"string\" , \"sha1\" : \"string\" , \"sha256\" : \"string\" , \"sha512\" : \"string\" , \"created_at\" : \"2023-04-20T18:55:14.165Z\" , \"updated_at\" : \"2023-04-20T18:55:14.165Z\" } ] } Retrieving a Single Registry File You can retrieve a JSON record from the APTrust registry describing a generic file with a specified identifier or id. File identifiers are strings, such as 'example.edu/photos/data/image1.jpg'. Ids are numeric. Note that this call returns not only the generic file info, but also all of the checksums and PREMIS events associated with the file. Examples apt-cmd registry get file <file_identifier> apt-cmd registry get file <file_id> Get File Response Format The get file command returns JSON in the following format: { \"id\" : 0 , \"file_format\" : \"string\" , \"size\" : 0 , \"identifier\" : \"string\" , \"intellectual_object_id\" : 0 , \"state\" : \"A\" , \"last_fixity_check\" : \"2023-04-20T19:09:44.674Z\" , \"institution_id\" : 0 , \"storage_option\" : \"Glacier-Deep-OH\" , \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"premis_events\" : [ { \"id\" : 0 , \"agent\" : \"string\" , \"date_time\" : \"2023-04-20T19:09:44.674Z\" , \"detail\" : \"string\" , \"event_type\" : \"access assignment\" , \"generic_file_id\" : 0 , \"identifier\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"institution_id\" : 0 , \"intellectual_object_id\" : 0 , \"object\" : \"string\" , \"old_uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"outcome\" : \"Failure\" , \"outcome_detail\" : \"string\" , \"outcome_information\" : \"string\" , \"created_at\" : \"2023-04-20T19:09:44.674Z\" , \"updated_at\" : \"2023-04-20T19:09:44.674Z\" } ], \"checksums\" : [ { \"id\" : 0 , \"algorithm\" : \"md5\" , \"datetime\" : \"2023-04-20T19:09:44.674Z\" , \"digest\" : \"string\" , \"generic_file_id\" : 0 } ], \"storage_records\" : [ { \"id\" : 0 , \"generic_file_id\" : 0 , \"url\" : \"string\" } ], \"created_at\" : \"2023-04-20T19:09:44.674Z\" , \"updated_at\" : \"2023-04-20T19:09:44.674Z\" } Configuration Settings apt-cmd will read configuration values from a config file if you specify one with the --config flag. Otherwise, it will read config values from the environment. The testconfig.env file shows a sample configuration used for testing. Config files can use .env, JSON, or YAML format. Just be sure to include the correct file extension (.env, .yml, .yaml, or .json) so apt-cmd knows how to parse the file. You may find it useful to maintain separate config file for separate profiles. For example, you may want to store S3 credentials for Amazon in aws.env, credentials for Wasabi in wasabi.env, and for Minio in minio.env. Or, you can skip config files altogether and use environment variables like so: APTRUST_AWS_KEY = my_key APTRUST_AWS_SECRET = my_secrete apt-cmd s3 upload --host = s3.amazonaws.com --bucket = \"my-bucket\" photo.jpg apt-cmd uses the following settings. Name Description APTRUST_AWS_KEY Access Key ID to access S3. Required only for S3 operations. Works with any S3-compatible service. APTRUST_AWS_SECRET Secret access key to access S3. Required only for S3 operations. Works with any S3-compatible service. APTRUST_REGISTRY_URL URL of the APTrust registry you want to access. Production is https://repo.aptrust.org . Demo is https://demo.aptrust.org . Required only for registry operations. APTRUST_REGISTRY_API_VERSION Version of the current registry API. For now, this should be v3 . Required only for registry operations. APTRUST_REGISTRY_EMAIL The email address associated with your APTrust registry account. Required only for registry operations. APTRUST_REGISTRY_API_KEY The API key associated with your APTrust registry account. Required only for registry operations.","title":"Partner Tools"},{"location":"partner_tools/#aptrust-partner-tools","text":"The aptrust command-line utility (apt-cmd, aka Partner Tools) enables you to create and validate bags, manage S3 files, and query data in the APTrust Registry. This tool replaces the older version 2.x partner tools which did not have bag creation features and worked only with Pharos. You can create workflows with apt-cmd that include: creating a bag validating the bag uploading the bag to an S3 bucket checking the APTrust registry to see when the bag was ingested retrieving object and file details, including checksums and PREMIS events, from the APTrust registry For bag creating and validation, the current release supports tarred bags only. Though access to the APTrust registry is limited to APTrust depositors, anyone can use apt-cmd's bagging and S3 features.","title":"APTrust Partner Tools"},{"location":"partner_tools/#downloads","text":"Platform Architecture Version SHA-256 Windows Intel 64-bit v3.0.0-beta b12d7daf68ca2a2ea99ea208143e4571cf49fd8221ea1998a9b4f5db9774b631 Mac Intel Intel 64-bit v3.0.0-beta 1b5ceb015744e9ca818e5526f0940988fd4dad7f56c1bde105762bd89522265b Mac ARM Apple Silicon (M series) v3.0.0-beta 0327e04b44137ce856b342542563133b9f8184364513394013bf200939dd6c8e Linux Intel 64-bit v3.0.0-beta 88d13960e50478066a6426ffd49e4763feece4642b7420e0d2e4f8d9412e9c88 APTrust partner tools are open source, distributed under the BSD 2-clause license. The source code is available on github at https://github.com/APTrust/partner-tools .","title":"Downloads"},{"location":"partner_tools/#help-and-troubleshooting","text":"You can get help for any apt-cmd command using the --help flag. For example, apt-cmd --help shows the list of available commands. To get help with a specific command, try apt-cmd [command] --help . For example, apt-cmd bag create --help . All operations support the --debug flag. When supplied, apt-cmd will print out additional detailed information about what it's doing.","title":"Help and Troubleshooting"},{"location":"partner_tools/#exit-codes","text":"The apt-cmd tool returns consistent exit codes for all operations. If you're using apt-cmd in scripts, check the exit code of each call to ensure it succeeded. An exit code of 0 (zero) indicates the call succeeded. A non-zero exit code means the call failed. Code Meaning 0 The operation completed without errors. 1 The operation failed due to a runtime error. Causes may include a network error, full disk, lack of file permissions, etc. 2 The bag you validated turned out to be invalid. Check the error output for details. 3 The operation failed due to a user error. This is almost always caused by missing or invalid command-line parameters, or missing/invalid configuration settings. 4 The operation did not complete because an external service responded with an error. Common causes including passing bad authentication values to the APTrust registry or the remote S3 service, requesting an object that doesn't exist, and requesting an item you're not authorized to access.","title":"Exit Codes"},{"location":"partner_tools/#creating-a-bag","text":"You can create bags that conform to the APTrust, BTR or empty BagIt profile. If you specify the empty profile, apt-cmd will create a valid bag with the tags and manifests you specify. The example below demonstrates how to speficy flags and tag values. For tag values, use the format \"filename.txt/Tag-Name=tag value\". If you omit the file name, it defaults to bag-info.txt. For example, the following two tags will both be written into the Source-Organization tag in bag-info.txt: --tags=\"bag-info.txt/Source-Organization=Faber College\" --tags=\"Source-Organization=Faber College\" Note that tag values are quoted in their entirety, both the name and the value. Apply double quotes to values containing special characters such as spaces and symbols and to values containing environment variables that you want to expand, such as \"$HOME\". Apply single quotes to values containing symbols that you don't want the shell to expand, such as curly braces, ampersands, and random dollar signs. You can specify any tag files and tag names you want. The following example packages the directory /home/josie/photos according to the APTrust BagIt profile and writes the tarred bag into /home/josie/bags/photos.tar. This bag will include md5 and sha256 manifests and tag manifests. It will also include the specified tags in the bag-info.txt and aptrust-info.txt tag files. apt-cmd bag create \\ --profile = aptrust \\ --manifest-algs = 'md5,sha256' \\ --output-file = '/home/josie/bags/photos.tar' \\ --bag-dir = '/home/josie/photos' \\ --tags = 'aptrust-info.txt/Title=My Bag of Photos' \\ --tags = 'aptrust-info.txt/Access=Institution' \\ --tags = 'aptrust-info.txt/Storage-Option=Standard' \\ --tags = 'bag-info.txt/Source-Organization=Faber College' \\ --tags = 'Custom-Tag=Single quoted because it {contains} $weird &characters'","title":"Creating a Bag"},{"location":"partner_tools/#troubleshooting","text":"Use the --debug flag to get the program to tell what it thinks it's supposed to be doing. If you use backslashes, as in the example able, be sure there are no trailing spaces or any characters other than a newline following the backslash.","title":"Troubleshooting"},{"location":"partner_tools/#limitations","text":"This tool currently supports only APTrust, BTR, and empty/generic BagIt profiles. For now, all bags will be output as tar files. This tool currently supports only the md5, sha1, sha256, and sha512 algorithms for manifests and tag manifests. This tool currently will not generate a fetch.txt file.","title":"Limitations"},{"location":"partner_tools/#validating-a-bag","text":"Currently, apt-cmd validates only tarred bags. The following commands validate a bag according to the APTrust BagIt profile: apt-cmd bag validate my_bag.tar apt-cmd bag validate -p aptrust my_bag.tar To validate a bag using the Beyond the Repository (BTR) profile: apt-cmd bag validate -p btr my_bag.tar To validate a bag using the empty profile: apt-cmd bag validate -p empty my_bag.tar The empty profile simply ensures the bag is valid according to the general BagIt specification.","title":"Validating a Bag"},{"location":"partner_tools/#limitations_1","text":"The validator only works with tarred bags and will not validate fetch.txt files.","title":"Limitations"},{"location":"partner_tools/#s3-commands","text":"apt-cmd can upload to and download from any service with an S3-compliant API. It can also list bucket contents in JSON or text formats, and delete items from S3. To access S3 services, you'll need to S3 credentials, as specified in the Configuration Settings section below.","title":"S3 Commands"},{"location":"partner_tools/#uploading-a-file-to-an-s3-bucket","text":"apt-cmd can upload a file to any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag.","title":"Uploading a File to an S3 Bucket"},{"location":"partner_tools/#examples","text":"Upload file photo.jpg to Amazon's S3 service: apt-cmd s3 upload --host = s3.amazonaws.com --bucket = \"my-bucket\" photo.jpg Upload the same file, but call it renamed.jpg in S3: apt-cmd s3 upload --host = s3.amazonaws.com \\ --bucket = \"my-bucket\" \\ --key = 'renamed.jpg' \\ photo.jpg","title":"Examples"},{"location":"partner_tools/#listing-the-contents-of-an-s3-bucket","text":"You can list files from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag. List output is in JSON format, unless you specify --format=text .","title":"Listing the Contents of an S3 Bucket"},{"location":"partner_tools/#examples_1","text":"List items in my_bucket with prefix \"photo\": apt-cmd s3 list --host = s3.amazonaws.com --bucket = my_bucket --prefix = photo List 10 items in my_bucket with prefix \"photo\", using plain text output: apt-cmd s3 list --host = s3.amazonaws.com \\ --bucket = my_bucket \\ --prefix = photo \\ --maxitems = 10 \\ --format = text","title":"Examples"},{"location":"partner_tools/#downloading-an-s3-file","text":"You can download files from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag.","title":"Downloading an S3 File"},{"location":"partner_tools/#examples_2","text":"Download a file from Amazon's S3 service into the current directory: apt-cmd s3 download --host = s3.amazonaws.com --bucket = \"my-bucket\" --key = 'photo_001.jpg' Download the same file and save it with a custom name on your desktop: apt-cmd s3 download --host = s3.amazonaws.com \\ --bucket = \"my-bucket\" \\ --key = 'photo_001.jpg' \\ --save-as = \" $HOME /Desktop/vacation.jpg\"","title":"Examples"},{"location":"partner_tools/#deleting-an-s3-file","text":"You can delete objects from any S3-compatible service. For this to work, you will need to have APTRUST_AWS_KEY and APTRUST_AWS_SECRET set in your environment, or in a config file specified with the --config flag.","title":"Deleting an S3 File"},{"location":"partner_tools/#example","text":"Delete object photo.jpg from my-bucket on AWS S3: apt-cmd s3 delete --host = s3.amazonaws.com --bucket = \"my-bucket\" --key = 'photo.jpg' Note: This returns exit status zero and '{ \"result\": \"OK\" }' if the key is successfully deleted or if the key wasn't in the bucket to begin with.","title":"Example"},{"location":"partner_tools/#registry-commands","text":"Registry commands retrieve information from the APTrust registry. You'll need APTrust credentials to query the Registry. See Configuration Settings below for info on how to pass these credentials to apt-cmd.","title":"Registry Commands"},{"location":"partner_tools/#listing-registry-work-items","text":"List work items from the APTrust registry, or run a special \"quick report.\" You'll typically want to list work items so you can track the progress of an ingest or restoration. Note that when filtering Work Items, Objects or Files using any of the list commands, you can supply filters as name-value pairs on the command line. These pairs do not use the double-dash (--) prefix .","title":"Listing Registry Work Items"},{"location":"partner_tools/#examples_3","text":"List recent ingests: apt-cmd registry list workitems action = 'Ingest' sort = 'date_processed__desc' List all work items since April 6, 2023: apt-cmd registry list workitems date_processed__gteq = '2023-04-06' sort = 'date_processed__desc' List failed work items: apt-cmd registry list workitems status = 'Failed' sort = 'date_processed__desc' List work items pertaining to a tar file you uploaded: apt-cmd registry list workitems name = 'bag-of-photos.tar' List work items pertaining to a bag with a specific etag: apt-cmd registry list workitems etag = '987654321-100' List work items pertaining to a specific intellectual object: apt-cmd registry list workitems object_identifier = 'test.edu/TestBag' List restorations or deletions of a specific file: apt-cmd registry list workitems generic_file_identifier = 'test.edu/TestBag/data/photo1.jpg'","title":"Examples"},{"location":"partner_tools/#quick-reports","text":"List all items from the past 30 days that are still in process: apt-cmd registry list workitems --report = inprocess List all items from the past 30 days that failed or were cancelled: apt-cmd registry list workitems --report = problems List all restorations from the past 30 days: apt-cmd registry list workitems --report = restorations When running quick reports, this tool ignores all other query params.","title":"Quick Reports"},{"location":"partner_tools/#workitem-list-filter-options","text":"When querying for Work Items, apt-cmd supports the following filter options: Name DataType Description action string The action, one of: Delete, Restore Object, Restore File, Glacier Restore, Ingest action__in string You can specify this multiple times to get results that include any of the named actions. For example, to get work items pertaining to any type of restoration, specify action_in=\"Restore Object\" action_in=\"Restore File\" action_in=\"Glacier Restore\" alt_identifier string Return work items pertaining to objects with this alternate identifier. bag_date__gteq date string 'yyyy-mm-dd' Return work items pertaining to bags created on or after this date. bag_date__lteq date string 'yyyy-mm-dd' Return work items pertaining to bags created on or before this date. bag_group_identifier string Return work items pertaining to bags having this bag group identifier. (Exact match only. Group identifier prefixes won't work here.) bagit_profile_identifier string Return work items pertaining to bags having this BagIt profile identifier. Allowed values are https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json (for the BTR profile), and https://raw.githubusercontent.com/APTrust/preservation-services/master/profiles/aptrust-v2.2.json (for the APTrust profile). date_processed__gteq date string 'yyyy-mm-dd' Return items last touched by a worker process on or after this date. date_processed__lteq date string 'yyyy-mm-dd' Return items last touched by a worker process on or before this date. etag string Return work items pertaining to an uploaded bag with this etag. generic_file_id integer Return work items pertaining to this generic file. generic_file_id__is_null string Set this to \"true\" to retrieve work items with an empty generic file identifier. Results will include only object-level work items, such as ingests, object deletions and object restorations. generic_file_identifier string Return work items pertaining to the generic file with this identifier. intellectual_object_id integer Return work items pertaining to this intellectual object. Note that for ingests, the object id will be empty until the ingest completes. intellectual_object_id__is_null string Set this to \"true\" to include work items with an empty intellectual object id. This will return ingests that have not yet completed. All other work items are associated with an object. name string The name of the tar file you want to check on. This is the name of the file you uploaded to your receiving bucket for ingest. For example, \"virginia.edu/bag-of-photos.tar\". needs_admin_review string Set this to \"true\" if you want to retrieve work items that have been flagged as problematic, requiring review from an APTrust administrator. node__is_null string Set this to \"true\" to retrieve work items with a null worker node. These items are currently not being worked on by any process. Items are in this state when awaiting processing and when processing has completed. node__not_null string Set this to \"true\" to retrieve items that are undergoing active processing by an ingest, restoration or deletion worker. object_identifier string Return items associated with this intellectual object identifier. queued_at__is_null date string 'yyyy-mm-dd' Return items queued for work on or after this date. queued_at__not_null date string 'yyyy-mm-dd' Return items queued for work on or before this date. retry string Set this to \"true\" to retrieve items that are eligible for processing. Set to \"false\" to retrieve problematic items that either will not be retried or require manually requeueing. size__gteq integer Return work items associated with files or objects containing at least this number of bytes. size__lteq integer Return work items associated with files or objects containing no more than this number of bytes. stage string Return items in this stage of processing. Allowed values: Available in S3, Cleanup, Copy To Staging, Fetch, Format Identification, Package, Receive, Record, Reingest Check, Requested, Resolve, Restoring, Storage Validation, Store, Unpack, Validate. stage__in string Specify this filter multiple times to retrieve items in any one of a number of stages. For example, to retrieve items in the Store, Unpack, or Validate stages, use stage__in=Store stage__in=Unpack stage_in=Validate status string Retrieve items having this status. Values include Cancelled, Failed, Pending, Started, Success, Suspended. status__in string Specify this filter multiple times to retrieve items having any of a number of statuses. For example, to retrieve items with Pending and Started status, use status__in=Pending status__in=Started . storage_option string Retrieve items pertaining to objects or files having the specified storage option. Available values : Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA user string (email address) Return work items initiated by the user with this email address.","title":"WorkItem List Filter Options"},{"location":"partner_tools/#workitem-list-paging-and-sort-options","text":"By default, the list workitems command returns the first 25 results, sorting items by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=name sorts by the name of the tar file, while sort=name__desc does a reverse sort by name.","title":"WorkItem List Paging and Sort Options"},{"location":"partner_tools/#workitem-list-response-format","text":"The workitem list command returns JSON in the following format. Note that count indicates the total number of results, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"action\" : \"Delete\" , \"alt_identifier\" : \"string\" , \"aptrust_approver\" : \"user@example.com\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"bag_date\" : \"2023-04-20T17:34:07.911Z\" , \"bag_group_identifier\" : \"string\" , \"bucket\" : \"string\" , \"created_at\" : \"2023-04-20T17:34:07.911Z\" , \"date_processed\" : \"2023-04-20T17:34:07.911Z\" , \"etag\" : \"string\" , \"generic_file_id\" : 0 , \"generic_file_identifier\" : \"string\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"inst_approver\" : \"user@example.com\" , \"intellectual_object_id\" : 0 , \"internal_sender_identifier\" : \"string\" , \"name\" : \"string\" , \"needs_admin_review\" : true , \"node\" : \"string\" , \"note\" : \"string\" , \"object_identifier\" : \"string\" , \"outcome\" : \"Failure\" , \"pid\" : 0 , \"queued_at\" : \"2023-04-20T17:34:07.911Z\" , \"retry\" : true , \"size\" : 0 , \"source_organization\" : \"string\" , \"stage\" : \"Available in S3\" , \"stage_started_at\" : \"2023-04-20T17:34:07.912Z\" , \"status\" : \"Cancelled\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"updated_at\" : \"2023-04-20T17:34:07.912Z\" , \"user\" : \"user@example.com\" } ] }","title":"WorkItem List Response Format"},{"location":"partner_tools/#retrieving-a-single-registry-work-item","text":"To retrieve a single WorkItem record from the APTrust Registry, use the command below. Note that id is an integer. apt-cmd registry get workitem <id>","title":"Retrieving a Single Registry Work Item"},{"location":"partner_tools/#workitem-get-response-format","text":"The command aptrust registry get workitem returns JSON in the following format: { \"id\" : 0 , \"action\" : \"Restore Object\" , \"alt_identifier\" : \"string\" , \"aptrust_approver\" : \"user@example.com\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"bag_date\" : \"2023-04-20T17:45:43.969Z\" , \"bag_group_identifier\" : \"string\" , \"bucket\" : \"string\" , \"created_at\" : \"2023-04-20T17:45:43.970Z\" , \"date_processed\" : \"2023-04-20T17:45:43.970Z\" , \"etag\" : \"string\" , \"generic_file_id\" : 0 , \"generic_file_identifier\" : \"string\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"inst_approver\" : \"user@example.com\" , \"intellectual_object_id\" : 0 , \"internal_sender_identifier\" : \"string\" , \"name\" : \"string\" , \"needs_admin_review\" : true , \"node\" : \"string\" , \"note\" : \"string\" , \"object_identifier\" : \"string\" , \"outcome\" : \"Success\" , \"pid\" : 0 , \"queued_at\" : \"2023-04-20T17:45:43.970Z\" , \"retry\" : true , \"size\" : 0 , \"source_organization\" : \"string\" , \"stage\" : \"Available in S3\" , \"stage_started_at\" : \"2023-04-20T17:45:43.970Z\" , \"status\" : \"Cancelled\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"updated_at\" : \"2023-04-20T17:45:43.970Z\" , \"user\" : \"user@example.com\" }","title":"WorkItem Get Response Format"},{"location":"partner_tools/#listing-registry-objects","text":"You can list objects from the APTrust Registry, with filters.","title":"Listing Registry Objects"},{"location":"partner_tools/#examples_4","text":"List 20 objects ordered by identifer: apt-cmd registry list objects sort = 'identifier' per_page = '20' List 20 objects reverse ordered by identifer: apt-cmd registry list objects sort = 'identifier__desc' per_page = '20' List objects created after April 6, 2023 apt-cmd registry list files created_at__gteq = '2023-04-06'","title":"Examples"},{"location":"partner_tools/#object-list-filter-options","text":"Name DataType Description access string Return objects with this access setting. Available values : consortia, institution, restricted alt_identifier string Return objects with this alternate identifier. alt_identifier__starts_with string Return objects whose alternate identifier starts with the speficied string. bag_group_identifier string Return objects with this bag group identifier. bag_group_identifier__starts_with string Return objects whose bag group identifier starts with the specified string. bagit_profile_identifier string Return objects with this BagIt profile identifier. Available values : https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json (BTR profile) and https://raw.githubusercontent.com/APTrust/preservation-services/master/profiles/aptrust-v2.2.json (APTrust profile). created_at__gteq date string 'yyyy-mm-dd' Return objects created on or after the given date. created_at__lteq date string 'yyyy-mm-dd' Return objects created on or before the given date. etag string Return the object with this etag. file_count__gteq integer Return objects containing at least this number of files. file_count__lteq integer Return objects containing no more than this number of files. identifier string Return the object with this identifier. internal_sender_identifier string Return the object with this internal sender identifier. size__gteq integer Return objects whose size is at least this number of bytes. size__lteq integer Return objects whose size is no more than this number of bytes. state string Return objects with this state. A = Active, D = Deleted. Available values: A, D. storage_option string Return objects with the specified storage option. Available values: Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA. updated_at__gteq date string 'yyyy-mm-dd' Return objects updated on or after the given timestamp. updated_at__lteq date string 'yyyy-mm-dd' Return objects updated on or before the given timestamp.","title":"Object List Filter Options"},{"location":"partner_tools/#object-list-paging-and-sort-options","text":"By default, the list objects command returns the first 25 results, sorting objects by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=identifier sorts by the object identifier, while sort=identifier__desc does a reverse sort by identifier.","title":"Object List Paging and Sort Options"},{"location":"partner_tools/#object-list-response-format","text":"The list objects command returns JSON with the following format. Note that count is the total number of resuls matching your query, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"title\" : \"string\" , \"description\" : \"string\" , \"identifier\" : \"string\" , \"alt_identifier\" : \"string\" , \"access\" : \"consortia\" , \"bag_name\" : \"string\" , \"institution_id\" : 0 , \"created_at\" : \"2023-04-20T18:25:28.513Z\" , \"updated_at\" : \"2023-04-20T18:25:28.513Z\" , \"state\" : \"A\" , \"etag\" : \"string\" , \"bag_group_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"source_organization\" : \"string\" , \"internal_sender_identifier\" : \"string\" , \"internal_sender_description\" : \"string\" , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"institution_type\" : \"MemberInstitution\" , \"institution_parent_id\" : 0 , \"file_count\" : 0 , \"size\" : 0 , \"payload_file_count\" : 0 , \"payload_size\" : 0 } ] }","title":"Object List Response Format"},{"location":"partner_tools/#retrieving-a-single-registry-object","text":"You can retrieve objects from the Registry by identifier or by id. Object identifiers are strings, such as 'example.edu/photos'. Ids are numeric.","title":"Retrieving a Single Registry Object"},{"location":"partner_tools/#examples_5","text":"apt-cmd registry get object identifier = <object_identifier> apt-cmd registry get object id = <object_id>","title":"Examples"},{"location":"partner_tools/#get-object-response-format","text":"The get object command returns JSON in the following format: { \"id\" : 0 , \"title\" : \"string\" , \"description\" : \"string\" , \"identifier\" : \"string\" , \"alt_identifier\" : \"string\" , \"access\" : \"consortia\" , \"bag_name\" : \"string\" , \"institution_id\" : 0 , \"created_at\" : \"2023-04-20T18:52:35.412Z\" , \"updated_at\" : \"2023-04-20T18:52:35.412Z\" , \"state\" : \"A\" , \"etag\" : \"string\" , \"bag_group_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"bagit_profile_identifier\" : \"https://github.com/dpscollaborative/btr_bagit_profile/releases/download/1.0/btr-bagit-profile.json\" , \"source_organization\" : \"string\" , \"internal_sender_identifier\" : \"string\" , \"internal_sender_description\" : \"string\" , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"institution_type\" : \"MemberInstitution\" , \"institution_parent_id\" : 0 , \"file_count\" : 0 , \"size\" : 0 , \"payload_file_count\" : 0 , \"payload_size\" : 0 }","title":"Get Object Response Format"},{"location":"partner_tools/#listing-registry-files","text":"The list files command lists files from the APTrust Registry, applying whatever filters you specify. Note that the file JSON returned by this call includes only summary information for each file, while the get file call returns more detailed info.","title":"Listing Registry Files"},{"location":"partner_tools/#examples_6","text":"List files belonging to object test.edu/my_bag, ordered by identifer: apt-cmd registry list files intellectual_object_identifier = 'test.edu/my_bag' sort = 'identifier' List only the first 10 files from that same bag: apt-cmd registry list files intellectual_object_identifier = 'test.edu/my_bag' sort = 'identifier' per_page = 10 List files created after April 6, 2023 apt-cmd registry list files created_at__gteq = '2023-04-06'","title":"Examples"},{"location":"partner_tools/#file-list-filter-options","text":"Name DataType Description created_at__gteq date string 'yyyy-mm-dd' Return files created on or after the given timestamp. created_at__lteq date string 'yyyy-mm-dd' Return files created on or before the given timestamp. identifier string Return the file with this identifier. intellectual_object_id integer Return files belonging to the specified intellectual object. last_fixity_check__gteq date string 'yyyy-mm-dd' Return files whose last fixity check was on or after the given timestamp. last_fixity_check__lteq date string 'yyyy-mm-dd' Return files whose last fixity check was on or before the given timestamp. size__gteq integer Return files whose size is at least this number of bytes. size__lteq integer Return files whose size is no more than this number of bytes. state string Return files with this state. A = Active, D = Deleted. Available values: A, D. storage_option string Return files with the specified storage option. Available values: Glacier-Deep-OH, Glacier-Deep-OR, Glacier-Deep-VA, Glacier-OH, Glacier-OR, Glacier-VA, Standard, Wasabi-OR, Wasabi-VA. updated_at__gteq date string 'yyyy-mm-dd' Return files updated on or after the given timestamp. updated_at__lteq date string 'yyyy-mm-dd' Return files updated on or before the given timestamp.","title":"File List Filter Options"},{"location":"partner_tools/#file-list-paging-and-sort-options","text":"By default, the list files command returns the first 25 results, sorting files by id. You can override these defaults with the following settings. Name DataType Description per_page integer The number of results to return per request. Default is 25. Max is 1000. page integer The page of results you want to retrieve. Default is 1. sort string Sort results using the specified column. You can sort on any field listed in the JSON sample below. Append \"__desc\" to the field name to do a descending (reverse) sort. For example, sort=identifier sorts by the file identifier, while sort=identifier__desc does a reverse sort by identifier.","title":"File List Paging and Sort Options"},{"location":"partner_tools/#file-list-response-format","text":"The list files command returns JSON with the following format. Note that count is the total number of resuls matching your query, while next and previous are URLs pointing to the next and previous pages of results. { \"count\" : 0 , \"next\" : \"string\" , \"previous\" : \"string\" , \"items\" : [ { \"id\" : 0 , \"file_format\" : \"string\" , \"size\" : 0 , \"identifier\" : \"string\" , \"intellectual_object_id\" : 0 , \"object_identifier\" : \"string\" , \"access\" : \"consortia\" , \"state\" : \"A\" , \"last_fixity_check\" : \"2023-04-20T18:55:14.164Z\" , \"institution_id\" : 0 , \"institution_name\" : \"string\" , \"institution_identifier\" : \"string\" , \"storage_option\" : \"Glacier-Deep-OH\" , \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"md5\" : \"string\" , \"sha1\" : \"string\" , \"sha256\" : \"string\" , \"sha512\" : \"string\" , \"created_at\" : \"2023-04-20T18:55:14.165Z\" , \"updated_at\" : \"2023-04-20T18:55:14.165Z\" } ] }","title":"File List Response Format"},{"location":"partner_tools/#retrieving-a-single-registry-file","text":"You can retrieve a JSON record from the APTrust registry describing a generic file with a specified identifier or id. File identifiers are strings, such as 'example.edu/photos/data/image1.jpg'. Ids are numeric. Note that this call returns not only the generic file info, but also all of the checksums and PREMIS events associated with the file.","title":"Retrieving a Single Registry File"},{"location":"partner_tools/#examples_7","text":"apt-cmd registry get file <file_identifier> apt-cmd registry get file <file_id>","title":"Examples"},{"location":"partner_tools/#get-file-response-format","text":"The get file command returns JSON in the following format: { \"id\" : 0 , \"file_format\" : \"string\" , \"size\" : 0 , \"identifier\" : \"string\" , \"intellectual_object_id\" : 0 , \"state\" : \"A\" , \"last_fixity_check\" : \"2023-04-20T19:09:44.674Z\" , \"institution_id\" : 0 , \"storage_option\" : \"Glacier-Deep-OH\" , \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"premis_events\" : [ { \"id\" : 0 , \"agent\" : \"string\" , \"date_time\" : \"2023-04-20T19:09:44.674Z\" , \"detail\" : \"string\" , \"event_type\" : \"access assignment\" , \"generic_file_id\" : 0 , \"identifier\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"institution_id\" : 0 , \"intellectual_object_id\" : 0 , \"object\" : \"string\" , \"old_uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , \"outcome\" : \"Failure\" , \"outcome_detail\" : \"string\" , \"outcome_information\" : \"string\" , \"created_at\" : \"2023-04-20T19:09:44.674Z\" , \"updated_at\" : \"2023-04-20T19:09:44.674Z\" } ], \"checksums\" : [ { \"id\" : 0 , \"algorithm\" : \"md5\" , \"datetime\" : \"2023-04-20T19:09:44.674Z\" , \"digest\" : \"string\" , \"generic_file_id\" : 0 } ], \"storage_records\" : [ { \"id\" : 0 , \"generic_file_id\" : 0 , \"url\" : \"string\" } ], \"created_at\" : \"2023-04-20T19:09:44.674Z\" , \"updated_at\" : \"2023-04-20T19:09:44.674Z\" }","title":"Get File Response Format"},{"location":"partner_tools/#configuration-settings","text":"apt-cmd will read configuration values from a config file if you specify one with the --config flag. Otherwise, it will read config values from the environment. The testconfig.env file shows a sample configuration used for testing. Config files can use .env, JSON, or YAML format. Just be sure to include the correct file extension (.env, .yml, .yaml, or .json) so apt-cmd knows how to parse the file. You may find it useful to maintain separate config file for separate profiles. For example, you may want to store S3 credentials for Amazon in aws.env, credentials for Wasabi in wasabi.env, and for Minio in minio.env. Or, you can skip config files altogether and use environment variables like so: APTRUST_AWS_KEY = my_key APTRUST_AWS_SECRET = my_secrete apt-cmd s3 upload --host = s3.amazonaws.com --bucket = \"my-bucket\" photo.jpg apt-cmd uses the following settings. Name Description APTRUST_AWS_KEY Access Key ID to access S3. Required only for S3 operations. Works with any S3-compatible service. APTRUST_AWS_SECRET Secret access key to access S3. Required only for S3 operations. Works with any S3-compatible service. APTRUST_REGISTRY_URL URL of the APTrust registry you want to access. Production is https://repo.aptrust.org . Demo is https://demo.aptrust.org . Required only for registry operations. APTRUST_REGISTRY_API_VERSION Version of the current registry API. For now, this should be v3 . Required only for registry operations. APTRUST_REGISTRY_EMAIL The email address associated with your APTrust registry account. Required only for registry operations. APTRUST_REGISTRY_API_KEY The API key associated with your APTrust registry account. Required only for registry operations.","title":"Configuration Settings"},{"location":"quick_start/","text":"Quick Start Logging In You can log in to Registry, APTrust's online registry, at the URLs below: Staging Repository - https://staging.aptrust.org Staging is for very new, potentially unstable features. Staging is currently the only system that accepts Beyond the Repository (BTR) formatted bags. Staging does not preserve anything for more than 7 days. Test/Demo Repository - https://demo.aptrust.org Demo is for you to test your bagging process and for APTrust to test new features that are considered stable. Demo does not guarantee preservation of anything beyond a few days. Production Repository - https://repo.aptrust.org Production is for materials you want to preserve for the long term. Adding Users See the User Management page for info on how to add users to your institution's Registry account. Making Your First Deposit We suggest you make your first deposits in the demo repository , so you can test out your workflows and get a feel for how Registry works. Depositing with DART The easiest way to make your first APTrust deposit is to use DART, which enables drag-and-drop deposits. DART runs on Windows, Mac, and Linux. To install DART and run your first ingest job, see the DART user guide . DART allows you to test test out different bagging and uploading options through a simple point-and-click interface. Once you find the combination that works for you, you can save it as a Workflow , and then you can run that workflow from within DART, or from the command line. You can also incorporate DART's command-line workflows into larger scripted workflows using languages like Ruby, Python, PHP, JavaScript or even bash shell scripts. Exporting from Fedora If your local repository uses Fedora, you can export APTrust-compliant bags directly from Fedora and then upload them to your receiving bucket for ingest. After Fedora produces the bag, you can use APTrust apt_upload tool to upload the bag to your receiving bucket. From there, APTrust ingest services will pick it up for processing, and you can track its progress in the Registry Work Items list. Custom Bagging If you want to bag materials yourself, be sure your bags conform to the APTrust bagging requirements . After bagging, you can use APTrust's apt_upload tool or other publicly available tools such as the MinIO client to upload your bag. REST API Integration If you're interested in automating deposits, restorations and other preservation activities, see our REST API and Swagger Docs","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#logging-in","text":"You can log in to Registry, APTrust's online registry, at the URLs below: Staging Repository - https://staging.aptrust.org Staging is for very new, potentially unstable features. Staging is currently the only system that accepts Beyond the Repository (BTR) formatted bags. Staging does not preserve anything for more than 7 days. Test/Demo Repository - https://demo.aptrust.org Demo is for you to test your bagging process and for APTrust to test new features that are considered stable. Demo does not guarantee preservation of anything beyond a few days. Production Repository - https://repo.aptrust.org Production is for materials you want to preserve for the long term.","title":"Logging In"},{"location":"quick_start/#adding-users","text":"See the User Management page for info on how to add users to your institution's Registry account.","title":"Adding Users"},{"location":"quick_start/#making-your-first-deposit","text":"We suggest you make your first deposits in the demo repository , so you can test out your workflows and get a feel for how Registry works.","title":"Making Your First Deposit"},{"location":"quick_start/#depositing-with-dart","text":"The easiest way to make your first APTrust deposit is to use DART, which enables drag-and-drop deposits. DART runs on Windows, Mac, and Linux. To install DART and run your first ingest job, see the DART user guide . DART allows you to test test out different bagging and uploading options through a simple point-and-click interface. Once you find the combination that works for you, you can save it as a Workflow , and then you can run that workflow from within DART, or from the command line. You can also incorporate DART's command-line workflows into larger scripted workflows using languages like Ruby, Python, PHP, JavaScript or even bash shell scripts.","title":"Depositing with DART"},{"location":"quick_start/#exporting-from-fedora","text":"If your local repository uses Fedora, you can export APTrust-compliant bags directly from Fedora and then upload them to your receiving bucket for ingest. After Fedora produces the bag, you can use APTrust apt_upload tool to upload the bag to your receiving bucket. From there, APTrust ingest services will pick it up for processing, and you can track its progress in the Registry Work Items list.","title":"Exporting from Fedora"},{"location":"quick_start/#custom-bagging","text":"If you want to bag materials yourself, be sure your bags conform to the APTrust bagging requirements . After bagging, you can use APTrust's apt_upload tool or other publicly available tools such as the MinIO client to upload your bag.","title":"Custom Bagging"},{"location":"quick_start/#rest-api-integration","text":"If you're interested in automating deposits, restorations and other preservation activities, see our REST API and Swagger Docs","title":"REST API Integration"},{"location":"bagging/","text":"APTrust Bagging Requirements APTrust currently accepts bags for ingest that use the APTrust BagIt and Beyond the Repository (BTR) BagIt profiles. Bags will be restored using the same profile as the submission. For info on what constitutes a valid BTR bag, see version 1.0 of the BTR bagit profile . The remainder of this page will discuss the APTrust format and the allowed options to use when bagging. Note When you upload a bag to APTrust, ingest services will look at the BagIt-Profile-Identifier tag in the bag-info.txt file. If this is set to https://github.com/dpscollaborative/btr_bagit_profile/blob/1.0/btr-bagit-profile.json , it will be validated according to the BTR BagIt profile. If BagIt-Profile-Identifier is set to any other value, or if the value is missing, ingest services will validate the bag according to the APTrust profile. APTrust BagIt Specification In addition to conforming to the BagIt specification version 0.97 or version 1.0 , valid APTrust bags must include the tag files and tags listed below, and must meet the following criteria: Bags must be serialized in tar format. Tarred bags must untar to a single directory whose name matches the name of the tar file. For example, my_bag.tar must untar to a directory called my_bag . The name of the tarred bag file must not include directories. my.edu.my_bag.tar is valid. C:\\path\\to\\my.edu.my_bag.tar is not. Bags must contain an md5 manifest and may also contain a sha256 manifest. Bags must be 5 terabytes or less in size. Bags may not contain a fetch.txt file. Bags may contain tag manifests. Bags may contain files outside of the data directory other than manifests and tag manifests. APTrust will consider these to be tag files, and will not try to parse them. When uploading multipart bags, use Bag-Group-Identifier tag to indicate that the bags belong together, or use the multipart bag naming format described below. (But note that the multipart bag naming format will soon be deprecated.) A valid untarred APTrust bag has the following structure: <base directory>/ | aptrust-info.txt | bag-info.txt | bagit.txt | manifest-&lt;algorithm&gt;.txt (md5 AND/OR sha256) | [optional tag manifests] | [optional additional tag files] \\--- data/ | [payload files] \\--- [optional tag directories]/ | [optional tag files] File and Directory Names File and Folder names must follow POSIX conventions: Contain upper or lower case letters, numbers, dots, underscores, percent signs, or dashes. (A\u2013Z a\u2013z 0\u20139 . _% -) May contain virtually any printable character, except newlines, carriage returns, tabs, vertical tabs and ASCII bells. (As of 1/30/2017) Are considered case sensitive. MUST not begin with a dash. (-) MUST not contain whitespaces May contain whitespaces. (As of 1/30/2017) Restricted to 255 characters in length including extension. MUST be at least 1 character in length. bagit.txt file The bag must have a bagit.txt file, with the following tags. Tag Allowed values BagIt-Version 0.97 or 1.0 Tag-File-Character-Encoding UTF-8 bag-info.txt file The bag-info.txt file should contain the following tags: Tag Description Example Source-Organization This should be the human readable name of the APTrust partner organization. For example, \"University of Virginia.\" You may be more specific, if you wish, specifying a specific college or library within the university, such as \"Georgetown University Law Library.\" However, when APTrust restores bags, the source organization in the bag-info.txt file will be set to the name of the partner institution. University of Virginia Bagging-Date The date the content was bagged. Use ISO 8601 UTC format (YYYY-MM-DD). 2019-08-19 Bag-Count Two numbers separated by \"of\", in particular, \"N of T\", where T is the total number of bags in a group of bags and N is the ordinal number within the group; if T is not known, specify it as \"?\" (question mark). Examples: 1 of 2, 4 of 4, 3 of ?, 89 of 145. Internal-Sender-Description A sender-local explanation of the contents and provenance. Internal-Sender-Identifier An alternate sender-specific identifier for the content and/or bag. Bag-Group-Identifier A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Greeling Photo Collection For more on bag group identifiers, see the Bag Group Identifiers section of the Objects page. For a list of other commonly-used tags in the bag-info.txt file, see the official BagIt specification for version 0.97 or version 1.0 . APTrust supports all of the tags mentioned in the 0.97 and 1.0 specifications. You may also add your own custom tags to this file. aptrust-info.txt file This file must contain the following tags: Tag Description Title A human readable title for searching and listing in APTrust. This cannot be empty. Description A human-readable description of the bag. This will appear in Registry. Access One of three access options listed below. The access option describes who can see an object's metadata, including its name and description, a list of its generic files and events. APTrust does not currently provide access to the objects themselves, except when you restore one of your bags. No matter which access option you choose, no other institution can access your intellectual object. Storage-Option This indicates how and where you want APTrust to store your bag. If omitted, Storage-Option defaults to \"Standard\". See the section on Storage Options below for more information. Allowed Storage-Option Values Standard : The bag's contents will be store in S3 in Northern Virginia and Glacier in Oregon. APTrust will perform fixity checks on the S3 files every 90 days. Glacier-OH : Files will be stored ONLY in Glacier, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-OR : Files will be stored ONLY in Glacier, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-VA : Files will be stored ONLY in Glacier, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OH : Files will be stored ONLY in Glacier Deep Archive, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OR : Files will be stored ONLY in Glacier Deep Archive, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-VA : Files will be stored ONLY in Glacier Deep Archive, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Wasabi-OR : Files will be stored only in Wasabi's Oregon data center. These files will receive fixity checks every 90 days. Wasabi-VA : Files will be stored only in Wasabi's Virginia data center. These files will receive fixity checks every 90 days. A note on storage options When you update an existing bag, APTrust will apply Storage-Option of the original version to the new version, even if the new version's Storage-Option tag explicitly specifies something different. This is to prevent the proliferation of multiple different versions of an object across multiple storage areas. If you want to change the Storage-Option of an existing object, you must delete it and then re-ingest it with the new option. Storage Options and Fixity Checks As noted in the list of storage options above, we check fixity only on items in S3 and Wasabi storage, not on items in Glacier and Glacier Deep Archive. If you want APTrust to run regular fixity checks on your materials, choose the Standard, Wasabi-OR or Wasabi-VA storage options. Allowed Access Values Restricted : Metadata about this object is accessible to the institutional administrator (at the depositing institution) and to the APTrust admin. No one else can even see that this object exists in the repository. Institution : All users at the depositing institution can see metadata about this object. Consortia : All APTrust members can see this object's metadata. DEPRECATED. Consortial access was never implemented in the APTrust repository. Use Restricted or Institution instead. The Consortia access option is treated the same as the Institution access option. Multipart bags - DEPRECATED Deprecation Notice APTrust will soon end support for the multipart naming format described in this section. Use the standard Bag-Group-Identifier tag instead, as described in the following section. You may split a single large bag into a number of smaller bags by using the naming convention institution_identifier.bag_identifier.b###.of### . That is, you append .bag01.of16 , .bag02.of16 , etc. to the end of the bag name of each bag in the group. Upon ingest, APTrust will treat all of the contents of all of the bags as part of a single intellectual object. Thus, the contents of test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object called test.edu/photos . Because APTrust re-bags files for restoration, the bags returned by a restoration request will not match the bags you originally submitted, but all of the payload files will be present. Generic Files in APTrust are referenced by their URI, which is the original filepath relative to the bag. File and folder names should be unique across multi-part bags to make sure all items are processed and not treated as a file update. Multipart bags - THE NEW WAY Please use the Bag-Group-Identifier tag in the bag-info.txt file to indicate that multiple bags are part of the same group. Bag-Group-Identifier is part of the BagIt standard described in RFC 8493 . The specification defines a Bag-Group-Identifier as A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Registry supports searching by Bag-Group-Identifier, which makes it easy for you to see which bags and files belong to the same logical group. The Bag-Group-Identifier tag provides the additional advantage of allowing you to restore specific parts of a collection without having to restore the entire collection. Under the old multipart naming scheme, all bag parts would be merged into a single giant bag. Bags sharing a Bag-Group-Identifier remain distinct intellectual objects and can be restored individually. Versioning APTrust does not currently support versioning. When you upload new versions of existing files, APTrust overwrites the old version with the new. See Updates for details. If you want to keep multiple versions of a bag or file, append a version number or timestamp to the end of the bag or file name. For example, test.edu/bag_of_photos and test.edu/bag_of_photos.v2 will be stored as separate objects, and files from the second version will not overwrite files from the first. Bagging Empty Folders APTrust cannot preserve or restore empty folders. If you want to include an empty folder in your bag, add an empty file to it, and we will preserve it. We recommend creating an empty file called .keep . The leading period in the filename ensures that it will be hidden from most file browsers, making the directory appear empty. The name .keep is traditionally used to indicate that the folder, although empty, should be preserved.","title":"APTrust Bagging Requirements"},{"location":"bagging/#aptrust-bagging-requirements","text":"APTrust currently accepts bags for ingest that use the APTrust BagIt and Beyond the Repository (BTR) BagIt profiles. Bags will be restored using the same profile as the submission. For info on what constitutes a valid BTR bag, see version 1.0 of the BTR bagit profile . The remainder of this page will discuss the APTrust format and the allowed options to use when bagging. Note When you upload a bag to APTrust, ingest services will look at the BagIt-Profile-Identifier tag in the bag-info.txt file. If this is set to https://github.com/dpscollaborative/btr_bagit_profile/blob/1.0/btr-bagit-profile.json , it will be validated according to the BTR BagIt profile. If BagIt-Profile-Identifier is set to any other value, or if the value is missing, ingest services will validate the bag according to the APTrust profile.","title":"APTrust Bagging Requirements"},{"location":"bagging/#aptrust-bagit-specification","text":"In addition to conforming to the BagIt specification version 0.97 or version 1.0 , valid APTrust bags must include the tag files and tags listed below, and must meet the following criteria: Bags must be serialized in tar format. Tarred bags must untar to a single directory whose name matches the name of the tar file. For example, my_bag.tar must untar to a directory called my_bag . The name of the tarred bag file must not include directories. my.edu.my_bag.tar is valid. C:\\path\\to\\my.edu.my_bag.tar is not. Bags must contain an md5 manifest and may also contain a sha256 manifest. Bags must be 5 terabytes or less in size. Bags may not contain a fetch.txt file. Bags may contain tag manifests. Bags may contain files outside of the data directory other than manifests and tag manifests. APTrust will consider these to be tag files, and will not try to parse them. When uploading multipart bags, use Bag-Group-Identifier tag to indicate that the bags belong together, or use the multipart bag naming format described below. (But note that the multipart bag naming format will soon be deprecated.) A valid untarred APTrust bag has the following structure: <base directory>/ | aptrust-info.txt | bag-info.txt | bagit.txt | manifest-&lt;algorithm&gt;.txt (md5 AND/OR sha256) | [optional tag manifests] | [optional additional tag files] \\--- data/ | [payload files] \\--- [optional tag directories]/ | [optional tag files]","title":"APTrust BagIt Specification"},{"location":"bagging/#file-and-directory-names","text":"File and Folder names must follow POSIX conventions: Contain upper or lower case letters, numbers, dots, underscores, percent signs, or dashes. (A\u2013Z a\u2013z 0\u20139 . _% -) May contain virtually any printable character, except newlines, carriage returns, tabs, vertical tabs and ASCII bells. (As of 1/30/2017) Are considered case sensitive. MUST not begin with a dash. (-) MUST not contain whitespaces May contain whitespaces. (As of 1/30/2017) Restricted to 255 characters in length including extension. MUST be at least 1 character in length.","title":"File and Directory Names"},{"location":"bagging/#bagittxt-file","text":"The bag must have a bagit.txt file, with the following tags. Tag Allowed values BagIt-Version 0.97 or 1.0 Tag-File-Character-Encoding UTF-8","title":"bagit.txt file"},{"location":"bagging/#bag-infotxt-file","text":"The bag-info.txt file should contain the following tags: Tag Description Example Source-Organization This should be the human readable name of the APTrust partner organization. For example, \"University of Virginia.\" You may be more specific, if you wish, specifying a specific college or library within the university, such as \"Georgetown University Law Library.\" However, when APTrust restores bags, the source organization in the bag-info.txt file will be set to the name of the partner institution. University of Virginia Bagging-Date The date the content was bagged. Use ISO 8601 UTC format (YYYY-MM-DD). 2019-08-19 Bag-Count Two numbers separated by \"of\", in particular, \"N of T\", where T is the total number of bags in a group of bags and N is the ordinal number within the group; if T is not known, specify it as \"?\" (question mark). Examples: 1 of 2, 4 of 4, 3 of ?, 89 of 145. Internal-Sender-Description A sender-local explanation of the contents and provenance. Internal-Sender-Identifier An alternate sender-specific identifier for the content and/or bag. Bag-Group-Identifier A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Greeling Photo Collection For more on bag group identifiers, see the Bag Group Identifiers section of the Objects page. For a list of other commonly-used tags in the bag-info.txt file, see the official BagIt specification for version 0.97 or version 1.0 . APTrust supports all of the tags mentioned in the 0.97 and 1.0 specifications. You may also add your own custom tags to this file.","title":"bag-info.txt file"},{"location":"bagging/#aptrust-infotxt-file","text":"This file must contain the following tags: Tag Description Title A human readable title for searching and listing in APTrust. This cannot be empty. Description A human-readable description of the bag. This will appear in Registry. Access One of three access options listed below. The access option describes who can see an object's metadata, including its name and description, a list of its generic files and events. APTrust does not currently provide access to the objects themselves, except when you restore one of your bags. No matter which access option you choose, no other institution can access your intellectual object. Storage-Option This indicates how and where you want APTrust to store your bag. If omitted, Storage-Option defaults to \"Standard\". See the section on Storage Options below for more information.","title":"aptrust-info.txt file"},{"location":"bagging/#allowed-storage-option-values","text":"Standard : The bag's contents will be store in S3 in Northern Virginia and Glacier in Oregon. APTrust will perform fixity checks on the S3 files every 90 days. Glacier-OH : Files will be stored ONLY in Glacier, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-OR : Files will be stored ONLY in Glacier, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-VA : Files will be stored ONLY in Glacier, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OH : Files will be stored ONLY in Glacier Deep Archive, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OR : Files will be stored ONLY in Glacier Deep Archive, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-VA : Files will be stored ONLY in Glacier Deep Archive, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Wasabi-OR : Files will be stored only in Wasabi's Oregon data center. These files will receive fixity checks every 90 days. Wasabi-VA : Files will be stored only in Wasabi's Virginia data center. These files will receive fixity checks every 90 days. A note on storage options When you update an existing bag, APTrust will apply Storage-Option of the original version to the new version, even if the new version's Storage-Option tag explicitly specifies something different. This is to prevent the proliferation of multiple different versions of an object across multiple storage areas. If you want to change the Storage-Option of an existing object, you must delete it and then re-ingest it with the new option.","title":"Allowed Storage-Option Values"},{"location":"bagging/#storage-options-and-fixity-checks","text":"As noted in the list of storage options above, we check fixity only on items in S3 and Wasabi storage, not on items in Glacier and Glacier Deep Archive. If you want APTrust to run regular fixity checks on your materials, choose the Standard, Wasabi-OR or Wasabi-VA storage options.","title":"Storage Options and Fixity Checks"},{"location":"bagging/#allowed-access-values","text":"Restricted : Metadata about this object is accessible to the institutional administrator (at the depositing institution) and to the APTrust admin. No one else can even see that this object exists in the repository. Institution : All users at the depositing institution can see metadata about this object. Consortia : All APTrust members can see this object's metadata. DEPRECATED. Consortial access was never implemented in the APTrust repository. Use Restricted or Institution instead. The Consortia access option is treated the same as the Institution access option.","title":"Allowed Access Values"},{"location":"bagging/#multipart-bags-deprecated","text":"Deprecation Notice APTrust will soon end support for the multipart naming format described in this section. Use the standard Bag-Group-Identifier tag instead, as described in the following section. You may split a single large bag into a number of smaller bags by using the naming convention institution_identifier.bag_identifier.b###.of### . That is, you append .bag01.of16 , .bag02.of16 , etc. to the end of the bag name of each bag in the group. Upon ingest, APTrust will treat all of the contents of all of the bags as part of a single intellectual object. Thus, the contents of test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object called test.edu/photos . Because APTrust re-bags files for restoration, the bags returned by a restoration request will not match the bags you originally submitted, but all of the payload files will be present. Generic Files in APTrust are referenced by their URI, which is the original filepath relative to the bag. File and folder names should be unique across multi-part bags to make sure all items are processed and not treated as a file update.","title":"Multipart bags - DEPRECATED"},{"location":"bagging/#multipart-bags-the-new-way","text":"Please use the Bag-Group-Identifier tag in the bag-info.txt file to indicate that multiple bags are part of the same group. Bag-Group-Identifier is part of the BagIt standard described in RFC 8493 . The specification defines a Bag-Group-Identifier as A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Registry supports searching by Bag-Group-Identifier, which makes it easy for you to see which bags and files belong to the same logical group. The Bag-Group-Identifier tag provides the additional advantage of allowing you to restore specific parts of a collection without having to restore the entire collection. Under the old multipart naming scheme, all bag parts would be merged into a single giant bag. Bags sharing a Bag-Group-Identifier remain distinct intellectual objects and can be restored individually.","title":"Multipart bags - THE NEW WAY"},{"location":"bagging/#versioning","text":"APTrust does not currently support versioning. When you upload new versions of existing files, APTrust overwrites the old version with the new. See Updates for details. If you want to keep multiple versions of a bag or file, append a version number or timestamp to the end of the bag or file name. For example, test.edu/bag_of_photos and test.edu/bag_of_photos.v2 will be stored as separate objects, and files from the second version will not overwrite files from the first.","title":"Versioning"},{"location":"bagging/#bagging-empty-folders","text":"APTrust cannot preserve or restore empty folders. If you want to include an empty folder in your bag, add an empty file to it, and we will preserve it. We recommend creating an empty file called .keep . The leading period in the filename ensures that it will be hidden from most file browsers, making the directory appear empty. The name .keep is traditionally used to indicate that the folder, although empty, should be preserved.","title":"Bagging Empty Folders"},{"location":"bagging/tools/","text":"Bagging Tools DART DART provides both a graphical UI and a command-line interface for building bags and uploading them to APTrust. If you're in a hurry, DART is the best way to get started. If you want to build an APTrust ingest workflow through a point-and-click interface and later incorporate that workflow into a set of scripted tasks, DART is also a good choice, as it supports both graphical and comman-line use. Partner Tools See the Partner Tools section of this guide for info on creating and validating bags with our new partner tools. Python BagIt If you want to roll your own bagger, try the Library of Congress's bagit.py module, or create a variation of the work already started by the University of Miami or North Carolina State University. BagIt Python Miami's APTrust-specific bagit scripts NCSU's APTrust-specific bagit scripts","title":"Bagging Tools"},{"location":"bagging/tools/#bagging-tools","text":"","title":"Bagging Tools"},{"location":"bagging/tools/#dart","text":"DART provides both a graphical UI and a command-line interface for building bags and uploading them to APTrust. If you're in a hurry, DART is the best way to get started. If you want to build an APTrust ingest workflow through a point-and-click interface and later incorporate that workflow into a set of scripted tasks, DART is also a good choice, as it supports both graphical and comman-line use.","title":"DART"},{"location":"bagging/tools/#partner-tools","text":"See the Partner Tools section of this guide for info on creating and validating bags with our new partner tools.","title":"Partner Tools"},{"location":"bagging/tools/#python-bagit","text":"If you want to roll your own bagger, try the Library of Congress's bagit.py module, or create a variation of the work already started by the University of Miami or North Carolina State University. BagIt Python Miami's APTrust-specific bagit scripts NCSU's APTrust-specific bagit scripts","title":"Python BagIt"},{"location":"preservation/deletion/","text":"Deletion The Deletion Process Deleting objects from APTrust is a multi-step process. An institutional administrator requests deletion of a file or entire object by clicking the delete button in Registry (see below). Note that only institutional administrators can request deletions. APTrust generates an email to other administrators at the same institution asking them to confirm the deletion. (If your institution has only one admin, APTrust will send the confirmation email to that admin.) If one additional admin clicks the 'confirm deletion' link in the email, the files or objects will be deleted. Minimum Retention Period Files and objects stored in S3 or in APTrust's Standard storage option (which includes both S3 and Glacier) can be deleted at any time. Items stored in Glacier, Glacier Deep Archive and Wasabi cannot be deleted until they have been stored for the minimum retention period. Minimum retention periods are: Glacier 90 days Glacier Deep Archive 180 days Wasabi 90 days For files and objects that have not met the minimum retention period, Registry's Delete button will be disabled. Hovering over the button will display a message describing why the item can't be deleted and the date it will become eligible for deletion. Minimum retention periods do not apply to file and object updates. You can update files and objects at any time after ingest, regardless of storage option and minimum retention periods. Deleting an Intellectual Object The screenshot below shows the detail page for an intellectual object. Clicking the Delete button on this page initiates the deletion process for the entire object. Deleting a Single File You can delete individual files from the Intellectual Object page or from the Generic File Detail page. To delete from the Intellectual Object page: Locate the file you want to delete. If you don't see it in the list of files below the donut charts, you can search for it by identifier or you can click one of the arrows below the list to load another page of file results. Click the plus sign next to the file you want to delete. This opens the file detail view. Scroll down to the end of the shaded file detail view and click the Delete File button. You can also delete files from the file detail page. To do so: Click More Options in the left nav. Click Files . Enter the file identifier in the search box and click Filter . Click on the file you want to delete. This will open the file detail view. Scroll to the bottom of the page and click Delete . Deletion Requests After clicking the Delete button, the system will create a deletion request record and send emails to other administrators at your insitution asking them to approve or reject the deletion request. The deletion emails contain a link and a special token to access the deletion request. The administrator follows the link, enters the token, then chooses whether to approve or reject the request. Note that even if an unauthorized user gets hold of the token in the email, they won't be able to approve or reject the request unless they are an admin at your institution. If the admin rejects the deletion request, the process ends there, and Registry takes no further action. If the admin approves the request, the Registry creates a Deletion Work Item and hands it off to Preservation Services to fulfill. Deletion Work Items After an institutional administrator confirms a deletion, the deletion request will appear in the list of work items, where you can track its progress. Deleting a single file or a single object results in one work item. The image below shows a list of completed work items. Note that deletions usually happen fairly quickly, within minutes of your institutional admin's confirmation of the deletion request email. Deletion Request Records You can view a list of all requested deletions* from your institution by clicking More Options in the left nav bar, then clicking Deletions . Click on any item in the list to see when the deletion was requested, and by whom. You'll also see who approved or rejected it, the file or object to be deleted, and (if the deletion was approved) the associated Work Item. Effect of Deletion on Metadata When you delete a file, Registry creates a deletion PREMIS event for the file that includes the date and time of deletion and the email address of the user who requested the deletion. Registry keeps the generic file records, changing it's state from 'Active' to 'Deleted.' Registry also keeps all prior PREMIS events and fixity records related to the file, and the file record remains accessible through both the Web UI and the member API. In addition, Registry keeps a Work Item record that shows when the deletion was requested and when it was completed. Work Items are also available through the Web UI and the member API. Bulk Deletion Contact help@aptrust.org if you want to delete a large number of objects. For bulk deletions, the depositor sends us a list of items to delete and APTrust initiates the process. Your institutional admins will still have to confirm the deletions before we execute them, but the process can save you having to click on the delete button on a large number of object or file detail pages. Reingest After Deletion If you delete an object and then upload a new version, Registry will mark the deleted object as active again and will create a new ingest event. The new object will include all of the files in the newly uploaded bag. If any of the newly uploaded files have the same identifier as a deleted file, Registry will mark the previously deleted file as active again, and will record the new version's checksums along with a new ingest event. In short, it's safe to delete an object and then re-upload it.","title":"Deletion"},{"location":"preservation/deletion/#deletion","text":"","title":"Deletion"},{"location":"preservation/deletion/#the-deletion-process","text":"Deleting objects from APTrust is a multi-step process. An institutional administrator requests deletion of a file or entire object by clicking the delete button in Registry (see below). Note that only institutional administrators can request deletions. APTrust generates an email to other administrators at the same institution asking them to confirm the deletion. (If your institution has only one admin, APTrust will send the confirmation email to that admin.) If one additional admin clicks the 'confirm deletion' link in the email, the files or objects will be deleted.","title":"The Deletion Process"},{"location":"preservation/deletion/#minimum-retention-period","text":"Files and objects stored in S3 or in APTrust's Standard storage option (which includes both S3 and Glacier) can be deleted at any time. Items stored in Glacier, Glacier Deep Archive and Wasabi cannot be deleted until they have been stored for the minimum retention period. Minimum retention periods are: Glacier 90 days Glacier Deep Archive 180 days Wasabi 90 days For files and objects that have not met the minimum retention period, Registry's Delete button will be disabled. Hovering over the button will display a message describing why the item can't be deleted and the date it will become eligible for deletion. Minimum retention periods do not apply to file and object updates. You can update files and objects at any time after ingest, regardless of storage option and minimum retention periods.","title":"Minimum Retention Period"},{"location":"preservation/deletion/#deleting-an-intellectual-object","text":"The screenshot below shows the detail page for an intellectual object. Clicking the Delete button on this page initiates the deletion process for the entire object.","title":"Deleting an Intellectual Object"},{"location":"preservation/deletion/#deleting-a-single-file","text":"You can delete individual files from the Intellectual Object page or from the Generic File Detail page. To delete from the Intellectual Object page: Locate the file you want to delete. If you don't see it in the list of files below the donut charts, you can search for it by identifier or you can click one of the arrows below the list to load another page of file results. Click the plus sign next to the file you want to delete. This opens the file detail view. Scroll down to the end of the shaded file detail view and click the Delete File button. You can also delete files from the file detail page. To do so: Click More Options in the left nav. Click Files . Enter the file identifier in the search box and click Filter . Click on the file you want to delete. This will open the file detail view. Scroll to the bottom of the page and click Delete .","title":"Deleting a Single File"},{"location":"preservation/deletion/#deletion-requests","text":"After clicking the Delete button, the system will create a deletion request record and send emails to other administrators at your insitution asking them to approve or reject the deletion request. The deletion emails contain a link and a special token to access the deletion request. The administrator follows the link, enters the token, then chooses whether to approve or reject the request. Note that even if an unauthorized user gets hold of the token in the email, they won't be able to approve or reject the request unless they are an admin at your institution. If the admin rejects the deletion request, the process ends there, and Registry takes no further action. If the admin approves the request, the Registry creates a Deletion Work Item and hands it off to Preservation Services to fulfill.","title":"Deletion Requests"},{"location":"preservation/deletion/#deletion-work-items","text":"After an institutional administrator confirms a deletion, the deletion request will appear in the list of work items, where you can track its progress. Deleting a single file or a single object results in one work item. The image below shows a list of completed work items. Note that deletions usually happen fairly quickly, within minutes of your institutional admin's confirmation of the deletion request email.","title":"Deletion Work Items"},{"location":"preservation/deletion/#deletion-request-records","text":"You can view a list of all requested deletions* from your institution by clicking More Options in the left nav bar, then clicking Deletions . Click on any item in the list to see when the deletion was requested, and by whom. You'll also see who approved or rejected it, the file or object to be deleted, and (if the deletion was approved) the associated Work Item.","title":"Deletion Request Records"},{"location":"preservation/deletion/#effect-of-deletion-on-metadata","text":"When you delete a file, Registry creates a deletion PREMIS event for the file that includes the date and time of deletion and the email address of the user who requested the deletion. Registry keeps the generic file records, changing it's state from 'Active' to 'Deleted.' Registry also keeps all prior PREMIS events and fixity records related to the file, and the file record remains accessible through both the Web UI and the member API. In addition, Registry keeps a Work Item record that shows when the deletion was requested and when it was completed. Work Items are also available through the Web UI and the member API.","title":"Effect of Deletion on Metadata"},{"location":"preservation/deletion/#bulk-deletion","text":"Contact help@aptrust.org if you want to delete a large number of objects. For bulk deletions, the depositor sends us a list of items to delete and APTrust initiates the process. Your institutional admins will still have to confirm the deletions before we execute them, but the process can save you having to click on the delete button on a large number of object or file detail pages.","title":"Bulk Deletion"},{"location":"preservation/deletion/#reingest-after-deletion","text":"If you delete an object and then upload a new version, Registry will mark the deleted object as active again and will create a new ingest event. The new object will include all of the files in the newly uploaded bag. If any of the newly uploaded files have the same identifier as a deleted file, Registry will mark the previously deleted file as active again, and will record the new version's checksums along with a new ingest event. In short, it's safe to delete an object and then re-upload it.","title":"Reingest After Deletion"},{"location":"preservation/ingest/","text":"Ingest Notice Before sending materials to APTrust for ingest, you'll need to get AWS keys that allow you to upload materials to your receiving bucket. If you don't already have these, contact help@aptrust.org to get them. Also keep in mind that you'll have separate AWS keys for the demo and production environments. You'll also need to know how to produce a valid APTrust bag. If you don't know how to do that yet, see the bagging page for details, or use DART to get going quickly. Uploading for Ingest Assuming you have a valid bag, you can send it to our production system by uploading it to aptrust.receiving.test.<institution.domain> for the demo system or aptrust.receiving.<institution.domain> for the production system. In each case, replace <institution.domain> with your institution's domain name. The following tools can upload files to your receiving bucket: DART APTrust Partner Tools Minio Client Amazon's AWS Command Line Tools If you plan on interacting frequently with S3, the Minio Client provides the best combination of rich features, ease of installation, and ease of use. For most of what you'll be doing with APTrust, DART and the APTrust Partner Tools should be sufficient. The Ingest Process Warning There can be a delay of up to 15 minutes before the tarred bag shows up in the work item list. After you upload tarred bag to your receiving bucket, APTrust's ingest process will add it to a list of items waiting to be processed. You can check the status of your bag in the list of Registry Work Items , using the REST API, or using the apt_check_ingest program from the partner tools . Once your bag is successfully ingested it is automatically deleted from your receiving bucket. If the ingest fails you can see details in Registry. Notice Failed bags stay in your receiving bucket for 30 or 60 days (demo or production) for your review. After that period the bag is automatically deleted. DART's dashboard also shows the status of items recently ingested and pending ingest. Smaller bags (those under about 5GB) tend to ingest quickly. Larger bags can take longer, with multi-terabyte bags sometimes taking a few days. This is because the ingest process calculates checksums on every byte of data in the bag and then typically copies each of the bag's files to two distinct regions of the country. Ingest Restrictions Materials must be sent in tarred bags. Bag names, and the names of files within bags, may not include control characters (such as backspace, delete, etc.) Maximum bag size on our demo system is 5 GB Maximum bag size on our production system is 5 TB You can get around the 5TB bag size limit by using bag groups and the Bag-Group-Identifier tag. See the bagging page for more info. Reingesting Existing Bags You can re-upload a bag any time you like to your receiving bucket, but be sure to read the page on updates so you understand how APTrust processes bag updates.","title":"Ingest"},{"location":"preservation/ingest/#ingest","text":"Notice Before sending materials to APTrust for ingest, you'll need to get AWS keys that allow you to upload materials to your receiving bucket. If you don't already have these, contact help@aptrust.org to get them. Also keep in mind that you'll have separate AWS keys for the demo and production environments. You'll also need to know how to produce a valid APTrust bag. If you don't know how to do that yet, see the bagging page for details, or use DART to get going quickly.","title":"Ingest"},{"location":"preservation/ingest/#uploading-for-ingest","text":"Assuming you have a valid bag, you can send it to our production system by uploading it to aptrust.receiving.test.<institution.domain> for the demo system or aptrust.receiving.<institution.domain> for the production system. In each case, replace <institution.domain> with your institution's domain name. The following tools can upload files to your receiving bucket: DART APTrust Partner Tools Minio Client Amazon's AWS Command Line Tools If you plan on interacting frequently with S3, the Minio Client provides the best combination of rich features, ease of installation, and ease of use. For most of what you'll be doing with APTrust, DART and the APTrust Partner Tools should be sufficient.","title":"Uploading for Ingest"},{"location":"preservation/ingest/#the-ingest-process","text":"Warning There can be a delay of up to 15 minutes before the tarred bag shows up in the work item list. After you upload tarred bag to your receiving bucket, APTrust's ingest process will add it to a list of items waiting to be processed. You can check the status of your bag in the list of Registry Work Items , using the REST API, or using the apt_check_ingest program from the partner tools . Once your bag is successfully ingested it is automatically deleted from your receiving bucket. If the ingest fails you can see details in Registry. Notice Failed bags stay in your receiving bucket for 30 or 60 days (demo or production) for your review. After that period the bag is automatically deleted. DART's dashboard also shows the status of items recently ingested and pending ingest. Smaller bags (those under about 5GB) tend to ingest quickly. Larger bags can take longer, with multi-terabyte bags sometimes taking a few days. This is because the ingest process calculates checksums on every byte of data in the bag and then typically copies each of the bag's files to two distinct regions of the country.","title":"The Ingest Process"},{"location":"preservation/ingest/#ingest-restrictions","text":"Materials must be sent in tarred bags. Bag names, and the names of files within bags, may not include control characters (such as backspace, delete, etc.) Maximum bag size on our demo system is 5 GB Maximum bag size on our production system is 5 TB You can get around the 5TB bag size limit by using bag groups and the Bag-Group-Identifier tag. See the bagging page for more info.","title":"Ingest Restrictions"},{"location":"preservation/ingest/#reingesting-existing-bags","text":"You can re-upload a bag any time you like to your receiving bucket, but be sure to read the page on updates so you understand how APTrust processes bag updates.","title":"Reingesting Existing Bags"},{"location":"preservation/restoration/","text":"Restoration Restoring Intellectual Objects You can restore an intellectual object by navigating to the object detail page and clicking the Restore button. You can find an object by going to the Object List page, clicking More Filters , and typing its identifier into the identifier search field. When you reach the object detail page, click the blue Restore button in the upper right corner of the page. After you click Restore Object , APTrust does the following: Creates a work item describing what is to be restored. Copies all of the object's files into a new bag, verifying each file's checksums in the process. Copies the latest version of the aptrust-info.txt and bag-info.txt files into the bag. Writes a JSON file into the bag containing all of the PREMIS events APTrust recorded for that bag and its contents. Adds md5 and sha256 manifests and tag manifests to the bag. Copies the bag to your restoration bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete. Notes on Restored Bags Because we rebuild bags for restoration, the bag you get back will not exactly match the bag you deposited, though we do guarantee that it contains all of the latest versions of all of the payload files. If you submitted a bag that was packaged according to the BTR BagIt Profile, it will restored in BTR format. All other bags will be restored in APTrust format. Note that, in addition to payload files, we preserve and restore the following tag files: aptrust-info.txt bag-info.txt (Which will be modified on restoration. See below.) Any other file outside the original bag's data directory that is not a manifest, tag manifest or fetch.txt file. We preserve the files above because they often contain important metadata. Restored bags tend to differ in the following ways from your originally submitted bags: Restored APTrust bags have both sha256 and md5 manifests, while the bag you originally deposited typically has only one or the other. Restored APTrust bags include md5 and sha256 tag manifests while bags submitted for ingest typically have neither. Restored BTR bags include sha1, sha256, and sha512 manifests and tag manifests, even if the original bag included only one of these. Restored bags include a modified bag-info.txt file. The modified file will include all of the tags and values included in the last ingested version of the bag, but: The bag will have a new Payload-Oxum. The original Payload-Oxum will be included as Original-Payload-Oxum. The bag will have a new Bagging-Date describing when APTrust's bag restorer rebuilt the bag. The original Bagging-Date will be included as Original-Bagging-Date. The bag will have a new Bag-Size describing the size of the restored bag. The original Bag-Size will be included as Original-Bag-Size. The bag will have a new Bagging-Software value saying that the bag was created by the APTrust restorer. The original Bagging-Software name will included as Original-Bagging-Software. Restored bags include the latest version of each preserved file in the payload (data) directory. This last point is important. In some cases, you or someone at your institution may have deleted files from a bag, or uploaded newer versions of files in a bag after the bag was initially ingested. Deleted files cannot be restored, and the restored bag will always contain the last uploaded version of each file. You can find information about updated and deleted files in the APTrust registry. Go to https://repo.aptrust.org/objects Search for the object you want to investigate. The easiest way to find an object is by its identifier. Scroll down the object detail page to the list of Active Files . Click the plus sign next to a file record to see its checksum history. If a newer version of a file was uploaded after initial ingest, this view will show you the old and new checksums, and the dates on which the checksum changed. You'll find more info, including a full list of Premis events, on the file detail page. Go to https://repo.aptrust.org/files and enter paste in the file identifier. To see a list of files deleted from the current object, click the show deleted files link on the top right side of the Active Files list. Because files may have been added to or deleted from a bag after its initial ingest, the Bag-Size and Payload-Oxum of the restored bag may differ from the Bag-Size and Payload-Oxum of any individual ingests. This is why we include both the current and original values in the restored version. If you're curious about why the contents of a restored bag differ from the original, the object's PREMIS events should provide a detailed record of all additions and deletions. See PREMIS Events for more info. Restoring Individual Files You can restore individual files from the Intellectual Object page or from the Generic File Detail page. To restore from the Intellectual Object page: Locate the file you want to restore. If you don't see it in the list of files below the donut charts, you can search for it by identifier or you can click one of the arrows below the list to load another page of file results. Click the plus sign next to the file you want to restore. This opens the file detail view. Scroll down to the end of the shaded file detail view and click the Restore File button. You can also restore files from the file detail page. To do so: Click More Options in the left nav. Click Files . Enter the file identifier in the search box and click Filter . Click on the file you want to restore. This will open the file detail view. Scroll to the bottom of the page and click Restore . APTrust performs the following steps for file restoration: Creates a work item with the restoration request. Verifies the file's checksum. Copies the file to your receiving bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete. Restoration Timeline Restoring an item usually takes anywhere from 10 minutes to 24 hours, depending on the size of the object, where it is stored, and the number of work items the system has to process before it gets to yours. When restoring items from S3, the restoration process can usually begin immediately, since the files are immediately accessible. For items using Standard storage (as opposed to Glacier-Only), APTrust always restores from S3. Restoring from Glacier takes longer than restoring from S3. When restoring from Glacier-only storage, it takes 4-5 hours to move files to a place where APTrust can copy and validate them. When restoring from Glacier Deep Archive, it takes 12 hours to move files into a location where APTrust can copy and validate them. The size of the items being restored determines how long it will take to restore them. For example, a 1 MB file can often be restored in under a minute. A 1 TB bag may take 24 hours or more. Most of restoration time is taken up by copying the files and validating their md5 and sha256 checksums. You can calculate overall restoration time as: S3: A product of file size: A few minutes for a few megabytes, or several hours for objects and files over 100 GB. Glacier: 4-5 hours plus file size. Glacier Deep Archive: 12 hours plus file size. Monitoring Restoration Progress You can check the progress of your restoration requests in Registry' Work Items list or the Registry REST API . When a restoration is complete, the file or bag will be waiting in your restoration bucket and APTrust will send an email to your institutional admins. The email includes information about the location of the restored file so you can download it. Downloading Restored Items You can use the apt_download command from our Partner Tools to download restored bags. Restored items are automatically deleted from your restoration bucket after 14 days to avoid ongoing storage costs. (We do not delete the preservation copy, only the copy in your restoration bucket.)","title":"Restoration"},{"location":"preservation/restoration/#restoration","text":"","title":"Restoration"},{"location":"preservation/restoration/#restoring-intellectual-objects","text":"You can restore an intellectual object by navigating to the object detail page and clicking the Restore button. You can find an object by going to the Object List page, clicking More Filters , and typing its identifier into the identifier search field. When you reach the object detail page, click the blue Restore button in the upper right corner of the page. After you click Restore Object , APTrust does the following: Creates a work item describing what is to be restored. Copies all of the object's files into a new bag, verifying each file's checksums in the process. Copies the latest version of the aptrust-info.txt and bag-info.txt files into the bag. Writes a JSON file into the bag containing all of the PREMIS events APTrust recorded for that bag and its contents. Adds md5 and sha256 manifests and tag manifests to the bag. Copies the bag to your restoration bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete.","title":"Restoring Intellectual Objects"},{"location":"preservation/restoration/#notes-on-restored-bags","text":"Because we rebuild bags for restoration, the bag you get back will not exactly match the bag you deposited, though we do guarantee that it contains all of the latest versions of all of the payload files. If you submitted a bag that was packaged according to the BTR BagIt Profile, it will restored in BTR format. All other bags will be restored in APTrust format. Note that, in addition to payload files, we preserve and restore the following tag files: aptrust-info.txt bag-info.txt (Which will be modified on restoration. See below.) Any other file outside the original bag's data directory that is not a manifest, tag manifest or fetch.txt file. We preserve the files above because they often contain important metadata. Restored bags tend to differ in the following ways from your originally submitted bags: Restored APTrust bags have both sha256 and md5 manifests, while the bag you originally deposited typically has only one or the other. Restored APTrust bags include md5 and sha256 tag manifests while bags submitted for ingest typically have neither. Restored BTR bags include sha1, sha256, and sha512 manifests and tag manifests, even if the original bag included only one of these. Restored bags include a modified bag-info.txt file. The modified file will include all of the tags and values included in the last ingested version of the bag, but: The bag will have a new Payload-Oxum. The original Payload-Oxum will be included as Original-Payload-Oxum. The bag will have a new Bagging-Date describing when APTrust's bag restorer rebuilt the bag. The original Bagging-Date will be included as Original-Bagging-Date. The bag will have a new Bag-Size describing the size of the restored bag. The original Bag-Size will be included as Original-Bag-Size. The bag will have a new Bagging-Software value saying that the bag was created by the APTrust restorer. The original Bagging-Software name will included as Original-Bagging-Software. Restored bags include the latest version of each preserved file in the payload (data) directory. This last point is important. In some cases, you or someone at your institution may have deleted files from a bag, or uploaded newer versions of files in a bag after the bag was initially ingested. Deleted files cannot be restored, and the restored bag will always contain the last uploaded version of each file. You can find information about updated and deleted files in the APTrust registry. Go to https://repo.aptrust.org/objects Search for the object you want to investigate. The easiest way to find an object is by its identifier. Scroll down the object detail page to the list of Active Files . Click the plus sign next to a file record to see its checksum history. If a newer version of a file was uploaded after initial ingest, this view will show you the old and new checksums, and the dates on which the checksum changed. You'll find more info, including a full list of Premis events, on the file detail page. Go to https://repo.aptrust.org/files and enter paste in the file identifier. To see a list of files deleted from the current object, click the show deleted files link on the top right side of the Active Files list. Because files may have been added to or deleted from a bag after its initial ingest, the Bag-Size and Payload-Oxum of the restored bag may differ from the Bag-Size and Payload-Oxum of any individual ingests. This is why we include both the current and original values in the restored version. If you're curious about why the contents of a restored bag differ from the original, the object's PREMIS events should provide a detailed record of all additions and deletions. See PREMIS Events for more info.","title":"Notes on Restored Bags"},{"location":"preservation/restoration/#restoring-individual-files","text":"You can restore individual files from the Intellectual Object page or from the Generic File Detail page. To restore from the Intellectual Object page: Locate the file you want to restore. If you don't see it in the list of files below the donut charts, you can search for it by identifier or you can click one of the arrows below the list to load another page of file results. Click the plus sign next to the file you want to restore. This opens the file detail view. Scroll down to the end of the shaded file detail view and click the Restore File button. You can also restore files from the file detail page. To do so: Click More Options in the left nav. Click Files . Enter the file identifier in the search box and click Filter . Click on the file you want to restore. This will open the file detail view. Scroll to the bottom of the page and click Restore . APTrust performs the following steps for file restoration: Creates a work item with the restoration request. Verifies the file's checksum. Copies the file to your receiving bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete.","title":"Restoring Individual Files"},{"location":"preservation/restoration/#restoration-timeline","text":"Restoring an item usually takes anywhere from 10 minutes to 24 hours, depending on the size of the object, where it is stored, and the number of work items the system has to process before it gets to yours. When restoring items from S3, the restoration process can usually begin immediately, since the files are immediately accessible. For items using Standard storage (as opposed to Glacier-Only), APTrust always restores from S3. Restoring from Glacier takes longer than restoring from S3. When restoring from Glacier-only storage, it takes 4-5 hours to move files to a place where APTrust can copy and validate them. When restoring from Glacier Deep Archive, it takes 12 hours to move files into a location where APTrust can copy and validate them. The size of the items being restored determines how long it will take to restore them. For example, a 1 MB file can often be restored in under a minute. A 1 TB bag may take 24 hours or more. Most of restoration time is taken up by copying the files and validating their md5 and sha256 checksums. You can calculate overall restoration time as: S3: A product of file size: A few minutes for a few megabytes, or several hours for objects and files over 100 GB. Glacier: 4-5 hours plus file size. Glacier Deep Archive: 12 hours plus file size.","title":"Restoration Timeline"},{"location":"preservation/restoration/#monitoring-restoration-progress","text":"You can check the progress of your restoration requests in Registry' Work Items list or the Registry REST API . When a restoration is complete, the file or bag will be waiting in your restoration bucket and APTrust will send an email to your institutional admins. The email includes information about the location of the restored file so you can download it. Downloading Restored Items You can use the apt_download command from our Partner Tools to download restored bags. Restored items are automatically deleted from your restoration bucket after 14 days to avoid ongoing storage costs. (We do not delete the preservation copy, only the copy in your restoration bucket.)","title":"Monitoring Restoration Progress"},{"location":"preservation/updates/","text":"Updates APTrust does not version bags. If you want to keep multiple versions of a bag, use a naming convention. For example: virginia.edu.bag_of_photos , virginia.edu.bag_of_photos_V2 , virginia.edu.bag_of_photos_V3 . When you upload a bag that has the same name as an existing bag, this is what happens: If a file in the new bag has the same name as a file in the old bag and the size or the md5 checksum or the sha256 checksum has changed, we overwrite the old file with the new one. You cannot recover the old file. If a file in the new bag has the same name as a file in the old bag and the size and checksums have not changed, we do nothing. If a file in the new bag did not exist in the old bag, we save it, but if a file in the old bag is not present in the new bag, we do not delete it. The table below shows what happens when you upload a new version of a previously ingested bag. Old Bag New Bag What we preserve Why bag-info.txt bag-info.txt (changed) the new version Contents in new version have changed data/document.pdf data/document.pdf (unchanged) old version The document did not change (file not present) data/new_image.jpg new version File did not exist in old bag, but it's here now data/old_image.jpg (file not present) old version Although this file has been deleted from the new bag, we will not assume you want to delete it from storage. File deletion must be a deliberate act of the depositor. This update policy has three important implications: If you want to delete files from an ingested bag / intellectual object, you must do that deliberately. Currently, you can delete only through our Web UI. When you restore the bag described in the table above, you'll get back both old_image.jpg and new_image.jpg (unless you manually delete one of them before you restore). You can update metadata in a bag by uploading only the metadata, as long as there's at least one file in the data directory and the bag is otherwise valid. This may be useful for bags that contain 100GB of data and 100KB of frequently-updated metadata. In Registry, updating (overwriting) an existing file in a bag causes the following to happen: A new PREMIS ingestion event appears with the date of the new ingest. Two new PREMIS fixity generation events appear, one with the md5 checksum of the new file, and one with the sha256 checksum. The Registry file page for the updated file will show the new checksums for the file at the bottom of the page, along with the date on which the new checksums were calculated. Below those will be the older checksums, and the dates they were calculated. Future fixity checks on the updated files will test against the latest fixity value of the updated files.","title":"Updates"},{"location":"preservation/updates/#updates","text":"APTrust does not version bags. If you want to keep multiple versions of a bag, use a naming convention. For example: virginia.edu.bag_of_photos , virginia.edu.bag_of_photos_V2 , virginia.edu.bag_of_photos_V3 . When you upload a bag that has the same name as an existing bag, this is what happens: If a file in the new bag has the same name as a file in the old bag and the size or the md5 checksum or the sha256 checksum has changed, we overwrite the old file with the new one. You cannot recover the old file. If a file in the new bag has the same name as a file in the old bag and the size and checksums have not changed, we do nothing. If a file in the new bag did not exist in the old bag, we save it, but if a file in the old bag is not present in the new bag, we do not delete it. The table below shows what happens when you upload a new version of a previously ingested bag. Old Bag New Bag What we preserve Why bag-info.txt bag-info.txt (changed) the new version Contents in new version have changed data/document.pdf data/document.pdf (unchanged) old version The document did not change (file not present) data/new_image.jpg new version File did not exist in old bag, but it's here now data/old_image.jpg (file not present) old version Although this file has been deleted from the new bag, we will not assume you want to delete it from storage. File deletion must be a deliberate act of the depositor. This update policy has three important implications: If you want to delete files from an ingested bag / intellectual object, you must do that deliberately. Currently, you can delete only through our Web UI. When you restore the bag described in the table above, you'll get back both old_image.jpg and new_image.jpg (unless you manually delete one of them before you restore). You can update metadata in a bag by uploading only the metadata, as long as there's at least one file in the data directory and the bag is otherwise valid. This may be useful for bags that contain 100GB of data and 100KB of frequently-updated metadata. In Registry, updating (overwriting) an existing file in a bag causes the following to happen: A new PREMIS ingestion event appears with the date of the new ingest. Two new PREMIS fixity generation events appear, one with the md5 checksum of the new file, and one with the sha256 checksum. The Registry file page for the updated file will show the new checksums for the file at the bottom of the page, along with the date on which the new checksums were calculated. Below those will be the older checksums, and the dates they were calculated. Future fixity checks on the updated files will test against the latest fixity value of the updated files.","title":"Updates"},{"location":"registry/","text":"Using Registry Logging In If you don't already have a Registry account, contact the APTrust administrator at your organization to set one up. If your organization does not yet have an account, contact help@aptrust.org to get set up. Once you have an account, log in with your email address to either the demo system or the production system. Demo: https://demo.aptrust.org Production: https://repo.aptrust.org You'll be asked to change your password the first time you log in. Depending on your organization's security settings, you may also be asked to activate two-factor authentication. For more on that, see Two Factor Authentication . Note that because the demo and production systems are separate, you will have to reset your password on each system the first time you log in. You can have different passwords and different two-factor authentication settings for each system. Forgot Your Password? If you forget your password, go to the appropriate login page above (Demo or Production) and click the Forgot your password? link below the Sign In button. The system will email you instructions on how to proceed.","title":"Using Registry"},{"location":"registry/#using-registry","text":"","title":"Using Registry"},{"location":"registry/#logging-in","text":"If you don't already have a Registry account, contact the APTrust administrator at your organization to set one up. If your organization does not yet have an account, contact help@aptrust.org to get set up. Once you have an account, log in with your email address to either the demo system or the production system. Demo: https://demo.aptrust.org Production: https://repo.aptrust.org You'll be asked to change your password the first time you log in. Depending on your organization's security settings, you may also be asked to activate two-factor authentication. For more on that, see Two Factor Authentication . Note that because the demo and production systems are separate, you will have to reset your password on each system the first time you log in. You can have different passwords and different two-factor authentication settings for each system.","title":"Logging In"},{"location":"registry/#forgot-your-password","text":"If you forget your password, go to the appropriate login page above (Demo or Production) and click the Forgot your password? link below the Sign In button. The system will email you instructions on how to proceed.","title":"Forgot Your Password?"},{"location":"registry/api_changes/","text":"API Changes from Pharos The primary API changes from Pharos to Registry include: Change in endpoint prefix from /member-api/v2/ to /member-api/v3/ Use of numeric IDs in URLs instead of object and file identifiers. Changes to some filter and sort parameters in endpoints that return lists of records. Registry includes more filter and sort options than Pharos. Minor changes to JSON structure of responses. Registry generally returns richer data that is easier to understand. Using IDs Instead of Identifiers The change from identifiers to IDs deserves special mention. In the Pharos REST API, you would request file information with a URL like this: GET /member-api/v2/files/test.edu/my-object/data/my-file.pdf The corresponding request in the Registry API looks like this: GET /member-api/v3/files/21145 The reason for this change is that file identifiers contain slashes, just like URL path identifiers. They also often contain characters that are illegal in URLs and require special encoding. In addition, Pharos URLs could contain query strings after the embedded file identifer. In practice, URLs with long, messy file names followed by query strings became nearly impossible to parse. The pattern for extracting embedded file identifiers from URLs became unmaintainable, and still cannot match a number of identifiers in our system. This change creates a problem. Object and file identifiers are semantic and knowable to depositors. Numeric IDs are opaque and unknowable. So how can you can map the known to the unknown? Easy. These requests will return object and file records that include IDs: GET /member-api/v3/objects?identifier={object-identifier} GET /member-api/v3/files?identifier={file-identifier} List Structure For endpoints returning lists of records (object, files, events, etc.), Pharos returned this format: { count: integer, next: string (url), previous: string (url), results: array of objects } Registry returns this format. The only difference is that results is now items : { count: integer, next: string (url), previous: string (url), items: array of objects } Changes in item structure are described below. Query Parameter Changes Endpoints returning lists support more sorting and filtering parameters than their Pharos counterparts. While the exact parameters for each endpoint are listed in the Registry Swagger docs , you should note the following patterns. Sorting Sorting parameter names use the pattern {field_name}__{direction}, with two underscores before direction. If no direction is specified, it defaults to asc . Examples: intellectual_object_identifier - Sort by intellectual object identifier, ascending. intellectual_object_identifier__asc - Sort by intellectual object identifier, ascending. intellectual_object_identifier__desc - Sort by intellectual object identifier, descending. Filtering Filtering parameter names generally match JSON field names. For example, to get a list of files or objects stored in Standard storage, add the following to your query string: storage_option=Standard For datetime and numeric fields, append __gteq or __lteq to the field name to find items whose field value is \"greater than or equal to\" (gteq) or \"less than or equal to\" (lteq) the specified value. Note the double unscore before each suffix. Examples: created_at__gteq=2022-08-01&created_at__lteq=2022-08-31 returns records created between August 1, 2022 and August 31, 2022. size__gteq=1000 returns records where size is at least 1000 bytes. size__lteq=1000 returns records where size is less than or equal to 1000 bytes. size__gteq=1000&size__lteq=2000 returns records where size is between 1000 and 2000 bytes. size=1000 return records where size is exactly 1000 bytes. New Endpoints API endpoints for the following types are new. Please follow the links for details. Alerts Checksums Deletion Requests Generic Files Changed The following endpoints have changed as noted. /member-api/v2/files/{institution_identifier} -> /member-api/v3/files /member-api/v2/files/{intellectual_object_identifier} -> /member-api/v3/files?intellectual_object_id={object_id} Deleted The following endpoint is no longer implemented: /member-api/v2/files/restore/{generic_file_id} Added Registry adds the following Generic File endpoint: /member-api/v3/files/show/{id} This returns a Generic File object with nested Premis Events, Checksums and Storage Records. JSON Changes The GenericFileView object returned by calls to /member-api/v3/files is a superset of the File object returned by the Pharos API. In addition to the old Pharos fields, GenericFileView contains the following: size (integer) - The size of the file, in bytes. object_identifier (string) - The identifier of the Intellectual Object to which this file belongs. access (string) - The file's access setting. institution_id (integer) - The ID of the institution that owns this file. institution_name (string) - The name of the institution that owns this file. institution_identifier (string) - The identifier (domain name) of the institution that owns this file. storage_option (string) - Describes where this file is stored. uuid (string) - The object's preservation identifier. md5 (string) - The most recently calculated md5 checksum for this file. sha1 (string) - The most recently calculated sha1 checksum for this file. sha256 (string) - The most recently calculated sha256 checksum for this file. sha512 (string) - The most recently calculated sha512 checksum for this file. storage_records (Array{Storage Record}) - A list of storage records indicating where this file is saved in preservation storage. Intellectual Objects Changed The following endpoints have changed as noted. /member-api/v2/objects -> /member-api/v3/objects /member-api/v2/objects/{institution_identifier} -> /member-api/v3/objects Note that the member API allows you to retrieve information about object belonging to your own institution only. Deleted The following endpoint is no longer implemented: /member-api/v2/objects/restore/{intellectual_object_id} Added Registry adds the following Intellectual Object endpoint: /member-api/v3/objects/show/{id} This returns an Intellectual Object summary. The summary does not include files or events because many objects have thousands of files and tens or hundreds of thousands of events. Use the file and event endpoints to retrieve paged lists of files and events. JSON Changes The Intellectual Object view records returned by the Registry API are a superset of the old Pharos object records. In addition to the fields returned by Pharos, Registry adds the following: bag_group_identifier (string) - Identifies the group of bags to which this bag belongs. This is often empty storage_option (string) - Describes where this object's files are stored. bagit_profile_identifier (string) - Describes the BagIt profile used to create and restore this object. This will be either and APTrust or BTR profile identifier. source_organization (string) - The value of the Source-Organization tag in the object's bag-info.txt file. internal_sender_identifier (string) - The value of the Internal-Sender-Identifier tag in the object's bag-info.txt file. internal_sender_description (string) - The value of the Internal-Sender-Description tag in the object's bag-info.txt file. institution_name (string) - The name of the institution that deposited this object. institution_identifier (string) - The identifier (domain name) of the institution that deposited this object. institution_type (string) - Indicates whether the institution that owns this object is a member institution (account) or subscribing institution (sub-account). institution_parent_id (integer) - ID of this institution's parent. Applicable to subscriber institutions (sub-accounts) only. file_count (integer) - The total number of files preserved for this object. This includes payload files and preserved manifests. APTrust does not preserve manifests or tag manifests. This number can change over time as additional new files are ingested or existing ones are deleted. size (integer) - The total number of bytes for all files preserved for this object. This number can change over time as additional new files are ingested or existing ones are deleted. payload_file_count (integer) - The total number of files in this object's payload. I.e., inside the data directory of the bag that was uploaded for deposit. This number can change over time as additional new files are ingested or existing ones are deleted. payload_size (integer) - Total size, in bytes, of the files in this object's payload directory (the data directory of the bag that was uploaded for ingest). This number can change over time as additional new files are ingested or existing ones are deleted. Premis Events Changed The following endpoints have changed as noted. /member-api/v2/events/{generic_file_identifier} -> /member-api/v3/events?generic_file_identifier={identifier} or /member-api/v3/events?generic_file_id={id} /member-api/v2/events/{intellectual_object_identifier} -> /member-api/v3/events?intellectual_object_identifier={identifier} or /member-api/v3/events?intellectual_object_id={id} Deleted The following endpoint was deleted because member institutions can retrieve only their own events. /member-api/v2/events/{institution_identifier} Added The new endpoint /member-api/v3/events/show/{id} displays details of a single event. JSON Changes The version 3 JSON contains all of the fields from the version 2 API, plus the following: institution_name (string) - The name of the institution to which the event pertains. Work Items Changed The following endpoints have changed as noted. /member-api/v2/items - /member-api/v3/items Deleted No Work Item endpoints were deleted. Added The following endpoint was added: /member-api/v3/items/show/{id} JSON Changes alt_identifier (string) - An alternate identifier for this object to which this Work Item pertains, supplied by the depositor. bag_group_identifier (string) - An optional identifier naming the logical group to which this object belongs. For instance, if ten bags are all part of the same collection, the collection name may be used as the group identifier associating all ten bags. bagit_profile_identifier (string) - The identifier of the BagIt profile used to create this bag. This can be either the APTrust profile URL or the BTR profile URL. Bags will be restored using the same profile under which they were submitted. date_processed (datetime as string) - The date and time of last known activity on this work item. This timestamp may change several times during multipart processes such as ingest. institution_identifier (string) - The identifier (domain name) of the institution that owns the files or objects to which this deletion request pertains. institution_name (string) - The name of the institution that owns the files or objects to which this work item pertains. internal_sender_identifier (string) - An optional identifier for internal use by the depositor. The identifier belongs to the object to which this work item pertains. node (string) - The hostname of the microservice worker currently processing this item. If this is empty, the item is not currently being processed. pid (integer) - The process ID of the worker that is currently working on this item. If this is empty, the item is not currently being processed. source_organization (string) - The name of the institution that submitted the object for ingest. This comes from the Source-Organization tag in the original bag. storage_option (string) - Indicates where the object's files are stored.","title":"API Changes from Pharos"},{"location":"registry/api_changes/#api-changes-from-pharos","text":"The primary API changes from Pharos to Registry include: Change in endpoint prefix from /member-api/v2/ to /member-api/v3/ Use of numeric IDs in URLs instead of object and file identifiers. Changes to some filter and sort parameters in endpoints that return lists of records. Registry includes more filter and sort options than Pharos. Minor changes to JSON structure of responses. Registry generally returns richer data that is easier to understand.","title":"API Changes from Pharos"},{"location":"registry/api_changes/#using-ids-instead-of-identifiers","text":"The change from identifiers to IDs deserves special mention. In the Pharos REST API, you would request file information with a URL like this: GET /member-api/v2/files/test.edu/my-object/data/my-file.pdf The corresponding request in the Registry API looks like this: GET /member-api/v3/files/21145 The reason for this change is that file identifiers contain slashes, just like URL path identifiers. They also often contain characters that are illegal in URLs and require special encoding. In addition, Pharos URLs could contain query strings after the embedded file identifer. In practice, URLs with long, messy file names followed by query strings became nearly impossible to parse. The pattern for extracting embedded file identifiers from URLs became unmaintainable, and still cannot match a number of identifiers in our system. This change creates a problem. Object and file identifiers are semantic and knowable to depositors. Numeric IDs are opaque and unknowable. So how can you can map the known to the unknown? Easy. These requests will return object and file records that include IDs: GET /member-api/v3/objects?identifier={object-identifier} GET /member-api/v3/files?identifier={file-identifier}","title":"Using IDs Instead of Identifiers"},{"location":"registry/api_changes/#list-structure","text":"For endpoints returning lists of records (object, files, events, etc.), Pharos returned this format: { count: integer, next: string (url), previous: string (url), results: array of objects } Registry returns this format. The only difference is that results is now items : { count: integer, next: string (url), previous: string (url), items: array of objects } Changes in item structure are described below.","title":"List Structure"},{"location":"registry/api_changes/#query-parameter-changes","text":"Endpoints returning lists support more sorting and filtering parameters than their Pharos counterparts. While the exact parameters for each endpoint are listed in the Registry Swagger docs , you should note the following patterns.","title":"Query Parameter Changes"},{"location":"registry/api_changes/#sorting","text":"Sorting parameter names use the pattern {field_name}__{direction}, with two underscores before direction. If no direction is specified, it defaults to asc . Examples: intellectual_object_identifier - Sort by intellectual object identifier, ascending. intellectual_object_identifier__asc - Sort by intellectual object identifier, ascending. intellectual_object_identifier__desc - Sort by intellectual object identifier, descending.","title":"Sorting"},{"location":"registry/api_changes/#filtering","text":"Filtering parameter names generally match JSON field names. For example, to get a list of files or objects stored in Standard storage, add the following to your query string: storage_option=Standard For datetime and numeric fields, append __gteq or __lteq to the field name to find items whose field value is \"greater than or equal to\" (gteq) or \"less than or equal to\" (lteq) the specified value. Note the double unscore before each suffix. Examples: created_at__gteq=2022-08-01&created_at__lteq=2022-08-31 returns records created between August 1, 2022 and August 31, 2022. size__gteq=1000 returns records where size is at least 1000 bytes. size__lteq=1000 returns records where size is less than or equal to 1000 bytes. size__gteq=1000&size__lteq=2000 returns records where size is between 1000 and 2000 bytes. size=1000 return records where size is exactly 1000 bytes.","title":"Filtering"},{"location":"registry/api_changes/#new-endpoints","text":"API endpoints for the following types are new. Please follow the links for details. Alerts Checksums Deletion Requests","title":"New Endpoints"},{"location":"registry/api_changes/#generic-files","text":"","title":"Generic Files"},{"location":"registry/api_changes/#changed","text":"The following endpoints have changed as noted. /member-api/v2/files/{institution_identifier} -> /member-api/v3/files /member-api/v2/files/{intellectual_object_identifier} -> /member-api/v3/files?intellectual_object_id={object_id}","title":"Changed"},{"location":"registry/api_changes/#deleted","text":"The following endpoint is no longer implemented: /member-api/v2/files/restore/{generic_file_id}","title":"Deleted"},{"location":"registry/api_changes/#added","text":"Registry adds the following Generic File endpoint: /member-api/v3/files/show/{id} This returns a Generic File object with nested Premis Events, Checksums and Storage Records.","title":"Added"},{"location":"registry/api_changes/#json-changes","text":"The GenericFileView object returned by calls to /member-api/v3/files is a superset of the File object returned by the Pharos API. In addition to the old Pharos fields, GenericFileView contains the following: size (integer) - The size of the file, in bytes. object_identifier (string) - The identifier of the Intellectual Object to which this file belongs. access (string) - The file's access setting. institution_id (integer) - The ID of the institution that owns this file. institution_name (string) - The name of the institution that owns this file. institution_identifier (string) - The identifier (domain name) of the institution that owns this file. storage_option (string) - Describes where this file is stored. uuid (string) - The object's preservation identifier. md5 (string) - The most recently calculated md5 checksum for this file. sha1 (string) - The most recently calculated sha1 checksum for this file. sha256 (string) - The most recently calculated sha256 checksum for this file. sha512 (string) - The most recently calculated sha512 checksum for this file. storage_records (Array{Storage Record}) - A list of storage records indicating where this file is saved in preservation storage.","title":"JSON Changes"},{"location":"registry/api_changes/#intellectual-objects","text":"","title":"Intellectual Objects"},{"location":"registry/api_changes/#changed_1","text":"The following endpoints have changed as noted. /member-api/v2/objects -> /member-api/v3/objects /member-api/v2/objects/{institution_identifier} -> /member-api/v3/objects Note that the member API allows you to retrieve information about object belonging to your own institution only.","title":"Changed"},{"location":"registry/api_changes/#deleted_1","text":"The following endpoint is no longer implemented: /member-api/v2/objects/restore/{intellectual_object_id}","title":"Deleted"},{"location":"registry/api_changes/#added_1","text":"Registry adds the following Intellectual Object endpoint: /member-api/v3/objects/show/{id} This returns an Intellectual Object summary. The summary does not include files or events because many objects have thousands of files and tens or hundreds of thousands of events. Use the file and event endpoints to retrieve paged lists of files and events.","title":"Added"},{"location":"registry/api_changes/#json-changes_1","text":"The Intellectual Object view records returned by the Registry API are a superset of the old Pharos object records. In addition to the fields returned by Pharos, Registry adds the following: bag_group_identifier (string) - Identifies the group of bags to which this bag belongs. This is often empty storage_option (string) - Describes where this object's files are stored. bagit_profile_identifier (string) - Describes the BagIt profile used to create and restore this object. This will be either and APTrust or BTR profile identifier. source_organization (string) - The value of the Source-Organization tag in the object's bag-info.txt file. internal_sender_identifier (string) - The value of the Internal-Sender-Identifier tag in the object's bag-info.txt file. internal_sender_description (string) - The value of the Internal-Sender-Description tag in the object's bag-info.txt file. institution_name (string) - The name of the institution that deposited this object. institution_identifier (string) - The identifier (domain name) of the institution that deposited this object. institution_type (string) - Indicates whether the institution that owns this object is a member institution (account) or subscribing institution (sub-account). institution_parent_id (integer) - ID of this institution's parent. Applicable to subscriber institutions (sub-accounts) only. file_count (integer) - The total number of files preserved for this object. This includes payload files and preserved manifests. APTrust does not preserve manifests or tag manifests. This number can change over time as additional new files are ingested or existing ones are deleted. size (integer) - The total number of bytes for all files preserved for this object. This number can change over time as additional new files are ingested or existing ones are deleted. payload_file_count (integer) - The total number of files in this object's payload. I.e., inside the data directory of the bag that was uploaded for deposit. This number can change over time as additional new files are ingested or existing ones are deleted. payload_size (integer) - Total size, in bytes, of the files in this object's payload directory (the data directory of the bag that was uploaded for ingest). This number can change over time as additional new files are ingested or existing ones are deleted.","title":"JSON Changes"},{"location":"registry/api_changes/#premis-events","text":"","title":"Premis Events"},{"location":"registry/api_changes/#changed_2","text":"The following endpoints have changed as noted. /member-api/v2/events/{generic_file_identifier} -> /member-api/v3/events?generic_file_identifier={identifier} or /member-api/v3/events?generic_file_id={id} /member-api/v2/events/{intellectual_object_identifier} -> /member-api/v3/events?intellectual_object_identifier={identifier} or /member-api/v3/events?intellectual_object_id={id}","title":"Changed"},{"location":"registry/api_changes/#deleted_2","text":"The following endpoint was deleted because member institutions can retrieve only their own events. /member-api/v2/events/{institution_identifier}","title":"Deleted"},{"location":"registry/api_changes/#added_2","text":"The new endpoint /member-api/v3/events/show/{id} displays details of a single event.","title":"Added"},{"location":"registry/api_changes/#json-changes_2","text":"The version 3 JSON contains all of the fields from the version 2 API, plus the following: institution_name (string) - The name of the institution to which the event pertains.","title":"JSON Changes"},{"location":"registry/api_changes/#work-items","text":"","title":"Work Items"},{"location":"registry/api_changes/#changed_3","text":"The following endpoints have changed as noted. /member-api/v2/items - /member-api/v3/items","title":"Changed"},{"location":"registry/api_changes/#deleted_3","text":"No Work Item endpoints were deleted.","title":"Deleted"},{"location":"registry/api_changes/#added_3","text":"The following endpoint was added: /member-api/v3/items/show/{id}","title":"Added"},{"location":"registry/api_changes/#json-changes_3","text":"alt_identifier (string) - An alternate identifier for this object to which this Work Item pertains, supplied by the depositor. bag_group_identifier (string) - An optional identifier naming the logical group to which this object belongs. For instance, if ten bags are all part of the same collection, the collection name may be used as the group identifier associating all ten bags. bagit_profile_identifier (string) - The identifier of the BagIt profile used to create this bag. This can be either the APTrust profile URL or the BTR profile URL. Bags will be restored using the same profile under which they were submitted. date_processed (datetime as string) - The date and time of last known activity on this work item. This timestamp may change several times during multipart processes such as ingest. institution_identifier (string) - The identifier (domain name) of the institution that owns the files or objects to which this deletion request pertains. institution_name (string) - The name of the institution that owns the files or objects to which this work item pertains. internal_sender_identifier (string) - An optional identifier for internal use by the depositor. The identifier belongs to the object to which this work item pertains. node (string) - The hostname of the microservice worker currently processing this item. If this is empty, the item is not currently being processed. pid (integer) - The process ID of the worker that is currently working on this item. If this is empty, the item is not currently being processed. source_organization (string) - The name of the institution that submitted the object for ingest. This comes from the Source-Organization tag in the original bag. storage_option (string) - Indicates where the object's files are stored.","title":"JSON Changes"},{"location":"registry/events/","text":"Premis Events APTrust records PREMIS events for intellectual objects and generic files. You can view a list of all events related to your instution's objects and files by clicking the Events link under More Options tab in the left nav. Use the filters at the top of the page to filter by event type, date, outcome, file identifier and object identifier. Note Note that although the sidebar lists all of the event types defined by the Library of Congress's PREMIS specification, APTrust only implements the event types listed below. Object-Level Events The APTrust repository records the following PREMIS events for intellectual objects: Ingestion - The ingest process for the object completed. This means the object record was created and all of the object's files were copied to preservation storage. Creation - The object record was created. Access Assignment - The object was assigned an access setting of Consortia , Institution , or Restricted . See access values for definitions. Identifier Assignment - The object was assigned an identifier. APTrust object identifiers use the pattern <institution.domain>/<object_name> , where object_name is the name of the tarred bag, minus the .tar extension. For example, test.edu/bag_of_photos . Deletion - The object was deleted. This means that all of its component files were deleted. Registry keeps a record of the object and all of its files after deletion, though it does not retain the files themselves. File-Level Events APTrust records the following PREMIS events for the generic files that make up each intellectual object: Ingestion - The file has been copied to long-term preservation storage and its metadata has been saved in Registry. Identifier Assignment - The file has been assigned an APTrust identifier, in the form <object_identifier>/<file_relative_path> , where file_relative_path is the location of the file in the bag in which it was submitted. For example, if test.edu submits a bag called bag_of_photos, the payload file data/photo1.jpg would have the identifier test.edu/bag_of_photos/data/photo1.jpg . Message Digest Calculation - The APTrust ingest process has calculated a message digest for the file. On ingest, there should be two of these events for each file, one with an md5 digest and one with a sha256 digest. Replication - The file has been copied to replication storage. This applies only to files using the Stadard storage option, in which the primary copy exists in S3 in Northern Virginia and the secondard (replicated) copy is in Glacier in Oregon. See storage options for more information. Fixity Check - This records the outcome of a fixity check on this file. APTrust perform fixity checks on items in Standard storage every 90 days, but does not perform fixity checks on items in Glacier-Only or Glacier Deep Archive storage. See storage options for more information. Also note that APTrust checks the sha256 fixity only, even though we also know the md5 fixity value. Deletion - Records when a file was deleted and at whose request.","title":"Premis Events"},{"location":"registry/events/#premis-events","text":"APTrust records PREMIS events for intellectual objects and generic files. You can view a list of all events related to your instution's objects and files by clicking the Events link under More Options tab in the left nav. Use the filters at the top of the page to filter by event type, date, outcome, file identifier and object identifier. Note Note that although the sidebar lists all of the event types defined by the Library of Congress's PREMIS specification, APTrust only implements the event types listed below.","title":"Premis Events"},{"location":"registry/events/#object-level-events","text":"The APTrust repository records the following PREMIS events for intellectual objects: Ingestion - The ingest process for the object completed. This means the object record was created and all of the object's files were copied to preservation storage. Creation - The object record was created. Access Assignment - The object was assigned an access setting of Consortia , Institution , or Restricted . See access values for definitions. Identifier Assignment - The object was assigned an identifier. APTrust object identifiers use the pattern <institution.domain>/<object_name> , where object_name is the name of the tarred bag, minus the .tar extension. For example, test.edu/bag_of_photos . Deletion - The object was deleted. This means that all of its component files were deleted. Registry keeps a record of the object and all of its files after deletion, though it does not retain the files themselves.","title":"Object-Level Events"},{"location":"registry/events/#file-level-events","text":"APTrust records the following PREMIS events for the generic files that make up each intellectual object: Ingestion - The file has been copied to long-term preservation storage and its metadata has been saved in Registry. Identifier Assignment - The file has been assigned an APTrust identifier, in the form <object_identifier>/<file_relative_path> , where file_relative_path is the location of the file in the bag in which it was submitted. For example, if test.edu submits a bag called bag_of_photos, the payload file data/photo1.jpg would have the identifier test.edu/bag_of_photos/data/photo1.jpg . Message Digest Calculation - The APTrust ingest process has calculated a message digest for the file. On ingest, there should be two of these events for each file, one with an md5 digest and one with a sha256 digest. Replication - The file has been copied to replication storage. This applies only to files using the Stadard storage option, in which the primary copy exists in S3 in Northern Virginia and the secondard (replicated) copy is in Glacier in Oregon. See storage options for more information. Fixity Check - This records the outcome of a fixity check on this file. APTrust perform fixity checks on items in Standard storage every 90 days, but does not perform fixity checks on items in Glacier-Only or Glacier Deep Archive storage. See storage options for more information. Also note that APTrust checks the sha256 fixity only, even though we also know the md5 fixity value. Deletion - Records when a file was deleted and at whose request.","title":"File-Level Events"},{"location":"registry/files/","text":"Generic Files Generic files are the individual files or bitstreams that make up intellectual objects. These may be photos, videos, text documents, XML metadata files exported from your internal repository, etc. When you send a bag to your receiving bucket, APTrust creates an intellectual object from the bag (or updates an existing object, if the bag name matches the name of an existing object), and APTrust stores all of the bag's payload files and tag files. Any file outside the bag's data directory, except for manifests and tag manifests, is considered a tag file. Listing Files You view a list of your institution's generic files by clicking on the Files link under More Options in the Registry's left nav bar. Use the filters at the top of the page to narrow down the list. Standard filters include File Identifier, State, and Storage Option. Click the More Filters link to filter by file size, creation date and modification date. File Details Click on the identifier of any file to view its detail page. From the detail page, you'll see checksums and events related to the file. Scroll down to see the file Restore button. Institutional admins will also see a Delete button at the bottom of the file detail page.","title":"Generic Files"},{"location":"registry/files/#generic-files","text":"Generic files are the individual files or bitstreams that make up intellectual objects. These may be photos, videos, text documents, XML metadata files exported from your internal repository, etc. When you send a bag to your receiving bucket, APTrust creates an intellectual object from the bag (or updates an existing object, if the bag name matches the name of an existing object), and APTrust stores all of the bag's payload files and tag files. Any file outside the bag's data directory, except for manifests and tag manifests, is considered a tag file.","title":"Generic Files"},{"location":"registry/files/#listing-files","text":"You view a list of your institution's generic files by clicking on the Files link under More Options in the Registry's left nav bar. Use the filters at the top of the page to narrow down the list. Standard filters include File Identifier, State, and Storage Option. Click the More Filters link to filter by file size, creation date and modification date.","title":"Listing Files"},{"location":"registry/files/#file-details","text":"Click on the identifier of any file to view its detail page. From the detail page, you'll see checksums and events related to the file. Scroll down to see the file Restore button. Institutional admins will also see a Delete button at the bottom of the file detail page.","title":"File Details"},{"location":"registry/objects/","text":"Intellectual Objects An intellectual object is a logical collection of files. Registry creates one intellectual object for each tarred bag file you upload to your receiving bucket. Collections spanning multiple bags can be logically linked using the Bag-Group-Identifier in the bag-info.txt file. Listing Objects To view a list of your institution's intellectual objects, click the Objects link in the left navigation bar. To find objects by identifier, bag name, title, bag group identifier, or alternate identifier, click the More Filters link. You'll find you can also filter by bag size, file count, and the dates on which objects were created or updated. Alternate Identifiers Alternate identifiers come from the Internal-Sender-Identifier tag in the bag-info.txt file. This usually identifies an object using your internal identifier scheme. This field is optional and may be blank. Bag Group Identifiers The optional bag group identifier comes from the Bag-Group-Identifier field in the bag-info.txt file. This is used to logically group a number of distinct intellectual objects. For example, some organizations prefer to break large collections into a series of smaller bags, each of which becomes a distinct intellectual object upon ingest. A group of objects called test.edu/smith_photos_1946 , test.edu/smith_photos_1947 , and test.edu/smith_photos_1948 may be logically grouped with the Bag-Group-Identifier Smith Photos . You can then search Registry for objects belonging to this group to find all files belonging to the Smith Photos collection. Viewing Object Details Click any object title in the list of objects to view its details. The top of the object detail page displays essential metadata such as the object's title, description, and identifiers. To the right is a list of recent PREMIS events and a button to restore the object. Institutional administrators will also see a button delete the object. Scroll down the object detail page and you'll find file summary charts and a list of files that make up the object. Click the plus sign next to any file in the list to see more information about that file. Info includes checksums, storage URLs and a button to restore the file. Institutional admins will also see a button to delete the file.","title":"Intellectual Objects"},{"location":"registry/objects/#intellectual-objects","text":"An intellectual object is a logical collection of files. Registry creates one intellectual object for each tarred bag file you upload to your receiving bucket. Collections spanning multiple bags can be logically linked using the Bag-Group-Identifier in the bag-info.txt file.","title":"Intellectual Objects"},{"location":"registry/objects/#listing-objects","text":"To view a list of your institution's intellectual objects, click the Objects link in the left navigation bar. To find objects by identifier, bag name, title, bag group identifier, or alternate identifier, click the More Filters link. You'll find you can also filter by bag size, file count, and the dates on which objects were created or updated.","title":"Listing Objects"},{"location":"registry/objects/#alternate-identifiers","text":"Alternate identifiers come from the Internal-Sender-Identifier tag in the bag-info.txt file. This usually identifies an object using your internal identifier scheme. This field is optional and may be blank.","title":"Alternate Identifiers"},{"location":"registry/objects/#bag-group-identifiers","text":"The optional bag group identifier comes from the Bag-Group-Identifier field in the bag-info.txt file. This is used to logically group a number of distinct intellectual objects. For example, some organizations prefer to break large collections into a series of smaller bags, each of which becomes a distinct intellectual object upon ingest. A group of objects called test.edu/smith_photos_1946 , test.edu/smith_photos_1947 , and test.edu/smith_photos_1948 may be logically grouped with the Bag-Group-Identifier Smith Photos . You can then search Registry for objects belonging to this group to find all files belonging to the Smith Photos collection.","title":"Bag Group Identifiers"},{"location":"registry/objects/#viewing-object-details","text":"Click any object title in the list of objects to view its details. The top of the object detail page displays essential metadata such as the object's title, description, and identifiers. To the right is a list of recent PREMIS events and a button to restore the object. Institutional administrators will also see a button delete the object. Scroll down the object detail page and you'll find file summary charts and a list of files that make up the object. Click the plus sign next to any file in the list to see more information about that file. Info includes checksums, storage URLs and a button to restore the file. Institutional admins will also see a button to delete the file.","title":"Viewing Object Details"},{"location":"registry/reports/","text":"Reports The Registry includes two reports to show deposit statistics, Deposits by Institution and Deposits Over Time. Deposits by Institution Deposits by Institution shows the deposits for an instition up until today, or up until the date selected in the Deposits Through list. Most institutions can see only their own deposit numbers. Member Institutions will also be able to see deposit statistics for their Associate Members. You can change the metric displayed in the graph by changing the Chart Metric option to show deposits by Gigabyte or Terabyte, or to show the number of objects of files on deposit. The raw numbers in the report appear in the table below the chart. Mouse over any bar on the chart to see a description of what the bar represents Deposits Over Time Change the Report Type selection to Deposits Over Time and you'll see a line chart showing how the quantity of your institution's deposits have changed over time. As with Deposits by Institution , you can change which metrics appear on the chart. This report does not currently show raw data below the chart because in many cases there are too many data points to display. Note that you can show and hide lines on this chart by clicking the legend above the chart.","title":"Reports"},{"location":"registry/reports/#reports","text":"The Registry includes two reports to show deposit statistics, Deposits by Institution and Deposits Over Time.","title":"Reports"},{"location":"registry/reports/#deposits-by-institution","text":"Deposits by Institution shows the deposits for an instition up until today, or up until the date selected in the Deposits Through list. Most institutions can see only their own deposit numbers. Member Institutions will also be able to see deposit statistics for their Associate Members. You can change the metric displayed in the graph by changing the Chart Metric option to show deposits by Gigabyte or Terabyte, or to show the number of objects of files on deposit. The raw numbers in the report appear in the table below the chart. Mouse over any bar on the chart to see a description of what the bar represents","title":"Deposits by Institution"},{"location":"registry/reports/#deposits-over-time","text":"Change the Report Type selection to Deposits Over Time and you'll see a line chart showing how the quantity of your institution's deposits have changed over time. As with Deposits by Institution , you can change which metrics appear on the chart. This report does not currently show raw data below the chart because in many cases there are too many data points to display. Note that you can show and hide lines on this chart by clicking the legend above the chart.","title":"Deposits Over Time"},{"location":"registry/rest_api/","text":"Registry REST API The Registry REST API enables you to programmatically query information about intellectual objects, files, premis events, and work items. For safety purposes, the API is primarily read-only. It does not allow object or file deletion, though it does allow you to request object restoration. The most common uses of the API are: Querying for an inventory of intellectual objects Querying for an inventory of files Checking the status of pending work items, such as ingests and restorations Perl API Clients The APTrust Registry is protected against distributed denial of service (DDOS) attacks by CloudFlare. CloudFlare may refuse access to Perl LWP clients. To get around this, you can set the User-Agent name of your LWP client like so: $ua->agent('Mozilla/5.0'); Another alternative is to use the WWW::Mechanize package as described in this StackOverflow thread . Getting an API Key To use the API, you'll need to get an API token from Registry. Follow these steps: Log in to Registry. Click the user icon in the upper right corner to see your My Account page. Click the Get API Key button. Separate Keys for Demo and Production Repositories The key you generate on https://demo.aptrust.org will only work on the demo server. The key you generate on https://repo.aptrust.org will only work on the production server. Using Your Key to Connect to the REST API To connect to the REST API, send your Registry login email address and your API key in the following request headers: X-Pharos-API-User: user@example.com X-Pharos-API-Key: topsecretapikey REST API Documentation You'll find interactive documentation for the Registry REST API at https://aptrust.github.io/registry/ . If you're curious, you can compare this to the old Pharos API . The Registry API includes a number of new and updated endpoints. See the API Changes page for details. Generating a Registry REST Client You can generate a Registry API client for most commonly used languages by following these steps: Go to the online Swagger editor . Select File > Import URL from the top menu. Enter the URL https://raw.githubusercontent.com/APTrust/registry/master/member_api_v3.yml and click OK . Click Generate Client from top menu. Choose the programming language you want to use. The Swagger editor will generate a client that you can use in your local scripts and workflows. Languages include Java, C#, Go, Python, PHP, Ruby, and more. Because the Registry's API documentation follows the OpenAPI version 3.0 standard, you can use the OpenAPI generator of your choice. The OpenAPI tools website maintains a list of SDK generators . In addition, the OpenAPI Generator project provides generators for more than fifty languages . Documentation Links Interactive Swagger Docs Human-Readable OpenAPI Source Machine-Readable OpenAPI Source","title":"Registry REST API"},{"location":"registry/rest_api/#registry-rest-api","text":"The Registry REST API enables you to programmatically query information about intellectual objects, files, premis events, and work items. For safety purposes, the API is primarily read-only. It does not allow object or file deletion, though it does allow you to request object restoration. The most common uses of the API are: Querying for an inventory of intellectual objects Querying for an inventory of files Checking the status of pending work items, such as ingests and restorations Perl API Clients The APTrust Registry is protected against distributed denial of service (DDOS) attacks by CloudFlare. CloudFlare may refuse access to Perl LWP clients. To get around this, you can set the User-Agent name of your LWP client like so: $ua->agent('Mozilla/5.0'); Another alternative is to use the WWW::Mechanize package as described in this StackOverflow thread .","title":"Registry REST API"},{"location":"registry/rest_api/#getting-an-api-key","text":"To use the API, you'll need to get an API token from Registry. Follow these steps: Log in to Registry. Click the user icon in the upper right corner to see your My Account page. Click the Get API Key button. Separate Keys for Demo and Production Repositories The key you generate on https://demo.aptrust.org will only work on the demo server. The key you generate on https://repo.aptrust.org will only work on the production server.","title":"Getting an API Key"},{"location":"registry/rest_api/#using-your-key-to-connect-to-the-rest-api","text":"To connect to the REST API, send your Registry login email address and your API key in the following request headers: X-Pharos-API-User: user@example.com X-Pharos-API-Key: topsecretapikey","title":"Using Your Key to Connect to the REST API"},{"location":"registry/rest_api/#rest-api-documentation","text":"You'll find interactive documentation for the Registry REST API at https://aptrust.github.io/registry/ . If you're curious, you can compare this to the old Pharos API . The Registry API includes a number of new and updated endpoints. See the API Changes page for details.","title":"REST API Documentation"},{"location":"registry/rest_api/#generating-a-registry-rest-client","text":"You can generate a Registry API client for most commonly used languages by following these steps: Go to the online Swagger editor . Select File > Import URL from the top menu. Enter the URL https://raw.githubusercontent.com/APTrust/registry/master/member_api_v3.yml and click OK . Click Generate Client from top menu. Choose the programming language you want to use. The Swagger editor will generate a client that you can use in your local scripts and workflows. Languages include Java, C#, Go, Python, PHP, Ruby, and more. Because the Registry's API documentation follows the OpenAPI version 3.0 standard, you can use the OpenAPI generator of your choice. The OpenAPI tools website maintains a list of SDK generators . In addition, the OpenAPI Generator project provides generators for more than fifty languages .","title":"Generating a Registry REST Client"},{"location":"registry/rest_api/#documentation-links","text":"Interactive Swagger Docs Human-Readable OpenAPI Source Machine-Readable OpenAPI Source","title":"Documentation Links"},{"location":"registry/spot_tests/","text":"Configuring Restoration Spot Tests Restoration spot tests periodically restore a single, random intellectual object to your institution's restoration bucket. When the spot test completes, APTrust sends an email to your institution's users and admins telling them a restored item is available for download. These spot tests aim to ensure: That APTrust can successfully restore an object to your receiving bucket. That your institution can make sense of the object, and can import it back into your institutional repository or DAMS, if necessary. To configure spot tests for your institution: Click More Options in the left navigation bar. Click Institution . Click Edit . Set Restoration spot test frequency to the number of days you'd like between tests. Common options are 30, 60, or 90 days. You can disable spot tests by setting days to zero. Click Submit.","title":"Configuring Restoration Spot Tests"},{"location":"registry/spot_tests/#configuring-restoration-spot-tests","text":"Restoration spot tests periodically restore a single, random intellectual object to your institution's restoration bucket. When the spot test completes, APTrust sends an email to your institution's users and admins telling them a restored item is available for download. These spot tests aim to ensure: That APTrust can successfully restore an object to your receiving bucket. That your institution can make sense of the object, and can import it back into your institutional repository or DAMS, if necessary. To configure spot tests for your institution: Click More Options in the left navigation bar. Click Institution . Click Edit . Set Restoration spot test frequency to the number of days you'd like between tests. Common options are 30, 60, or 90 days. You can disable spot tests by setting days to zero. Click Submit.","title":"Configuring Restoration Spot Tests"},{"location":"registry/two_factor_auth/","text":"Two-Factor Authentication Registry supports two-factor authentication for users and institutions who want an extra layer of security. Two Factor Authentication is required for institutional administrators in both the production repository and the demo repository, since institutional admins have the ability to delete materials. It is not required for institutional users, however we recommend that all users enable it. Tip Two-factor settings are separate on the production and demo repositories. Enabling or disabling this feature in the Registry production system has no effect on the demo system and vice-versa. You'll have to set your preferences separately on each system. Enabling Two-Factor Authentication Institutional users can enable two-factor authentication for themselves. Institutional administrators can require it for all users at their institution, thereby forcing them to enable it. Institutional users who enable two-factor auth for themselves can choose to disable it later. When an administrator enables two-factor auth for their institution, users cannot opt out or disable the setting. Enabling Two-Factor for Yourself To enable two-factor authentication for yourself, click the My Account in the upper right corner of the screen. Click the Set Up Two-Factor Auth button. Then enter your mobile phone number and choose either Authy or Text Message. Authy allows you to complete two-factor authentication via push notification, while Text sends a text (SMS) message to your phone with a one-time authentication token. Click Submit when you're done. You should receive a text message or push notification within a minute or so. If you chose the text/SMS option, enter the code you received in the text message into the verification field in Registry. If you have Authy installed on your phone and you chose to verify via push notification, click the Approve button when the Authy verification request appears. Generating Backup Codes If you're using two-factor authentication, you should generate a set of backup codes, in case you need to log in to the Registry when you don't have access to your phone. To generate backup codes, click the Generate Backup Codes button at the top of the My Account page. Copy your backup codes to a safe place on your computer. These codes are valid for one-time use. Enabling Two-Factor for Other Users or Your Entire Institution Institutional administrators can require two-factor authentication for specific users at their institution, or for the institution as a whole. To enable two-factor auth for a specific user: Click Users on the left nav bar. Click the name of the user you want to edit. Change Require Two-Factor Auth to Yes. Click Submit . To require two-factor auth for your institution: Click More Options in the left navigation bar. Click Institution . Click Edit . Change Enable two-factor authentication? to Yes. Click Submit. Grace Period for New Users New users have a grace period during which they will be prompted to enabled two-factor authentication. On the production repository, this grace period is 30 days long. On the demo repository, this grace period is 90 days long. The grace period begins when the user's account is created. It applies to all users for whom two-factor auth is required (institutional administrators and institutional users for whom two-factor auth has been required at their institution). If You're Locked Out If you can't log in and you don't have access to any valid backup codes, contact help@aptrust.org .","title":"Two-Factor Authentication"},{"location":"registry/two_factor_auth/#two-factor-authentication","text":"Registry supports two-factor authentication for users and institutions who want an extra layer of security. Two Factor Authentication is required for institutional administrators in both the production repository and the demo repository, since institutional admins have the ability to delete materials. It is not required for institutional users, however we recommend that all users enable it. Tip Two-factor settings are separate on the production and demo repositories. Enabling or disabling this feature in the Registry production system has no effect on the demo system and vice-versa. You'll have to set your preferences separately on each system.","title":"Two-Factor Authentication"},{"location":"registry/two_factor_auth/#enabling-two-factor-authentication","text":"Institutional users can enable two-factor authentication for themselves. Institutional administrators can require it for all users at their institution, thereby forcing them to enable it. Institutional users who enable two-factor auth for themselves can choose to disable it later. When an administrator enables two-factor auth for their institution, users cannot opt out or disable the setting.","title":"Enabling Two-Factor Authentication"},{"location":"registry/two_factor_auth/#enabling-two-factor-for-yourself","text":"To enable two-factor authentication for yourself, click the My Account in the upper right corner of the screen. Click the Set Up Two-Factor Auth button. Then enter your mobile phone number and choose either Authy or Text Message. Authy allows you to complete two-factor authentication via push notification, while Text sends a text (SMS) message to your phone with a one-time authentication token. Click Submit when you're done. You should receive a text message or push notification within a minute or so. If you chose the text/SMS option, enter the code you received in the text message into the verification field in Registry. If you have Authy installed on your phone and you chose to verify via push notification, click the Approve button when the Authy verification request appears.","title":"Enabling Two-Factor for Yourself"},{"location":"registry/two_factor_auth/#generating-backup-codes","text":"If you're using two-factor authentication, you should generate a set of backup codes, in case you need to log in to the Registry when you don't have access to your phone. To generate backup codes, click the Generate Backup Codes button at the top of the My Account page. Copy your backup codes to a safe place on your computer. These codes are valid for one-time use.","title":"Generating Backup Codes"},{"location":"registry/two_factor_auth/#enabling-two-factor-for-other-users-or-your-entire-institution","text":"Institutional administrators can require two-factor authentication for specific users at their institution, or for the institution as a whole. To enable two-factor auth for a specific user: Click Users on the left nav bar. Click the name of the user you want to edit. Change Require Two-Factor Auth to Yes. Click Submit . To require two-factor auth for your institution: Click More Options in the left navigation bar. Click Institution . Click Edit . Change Enable two-factor authentication? to Yes. Click Submit.","title":"Enabling Two-Factor for Other Users or Your Entire Institution"},{"location":"registry/two_factor_auth/#grace-period-for-new-users","text":"New users have a grace period during which they will be prompted to enabled two-factor authentication. On the production repository, this grace period is 30 days long. On the demo repository, this grace period is 90 days long. The grace period begins when the user's account is created. It applies to all users for whom two-factor auth is required (institutional administrators and institutional users for whom two-factor auth has been required at their institution).","title":"Grace Period for New Users"},{"location":"registry/two_factor_auth/#if-youre-locked-out","text":"If you can't log in and you don't have access to any valid backup codes, contact help@aptrust.org .","title":"If You're Locked Out"},{"location":"registry/user_management/","text":"User Management Listing Users You can see a list of users at your institution by clicking the Users link in the left nav bar. Viewing and Editing Users Click any user in the Users list to view their details. The buttons at the top of the screen do the following: Edit - Edit user details. For details on what the settings mean, see Adding New Users below. Deactivate - Deactivates a user's account. Once deactivated, the user will not be able to log in. This action is reversible. You can re-activate any user at any time. Change Password - This lets you specify a new password for a user. Force Password Reset - This sends an email to the user with a special link that will let them choose their own new password. Adding New Users Institutional administrators can add new users at their institition. To add a new user: Click Users in the left nav bar. Click the green Add New User button in the top right corner of the screen. Enter the new user's name, email address and mobile phone number. This person will use the specified email address to log in. The phone number will be used for two-factor authentication, if the user has it enabled. If you want the user to use two-factor authentication, specify a date by which they must activate two-factor authentication. The user will need to log into the system before that date--without two-factor--to set up their multi-step authentication. Select one of the following roles: Institutional Admin - This role has all the privilages of the institutional user, and can add, edit, and deactivate users at your organization. It can also access restricted objects and initiate and approve object and file deletions. Institutional User - This role can send materials to APTrust for ingest, and can view and restore files and objects that are not restricted. Reactivating Deactivated Users Click the Users link in the left nav bar. Click on the name of the users you want to reactivate. Deactivated users have a non-empty Disabled date describing when their account was disabled. In the screenshot below, the first user in the list was deactivated on January 15, 2021. On the user's detail page, click the Reactivate button.","title":"User Management"},{"location":"registry/user_management/#user-management","text":"","title":"User Management"},{"location":"registry/user_management/#listing-users","text":"You can see a list of users at your institution by clicking the Users link in the left nav bar.","title":"Listing Users"},{"location":"registry/user_management/#viewing-and-editing-users","text":"Click any user in the Users list to view their details. The buttons at the top of the screen do the following: Edit - Edit user details. For details on what the settings mean, see Adding New Users below. Deactivate - Deactivates a user's account. Once deactivated, the user will not be able to log in. This action is reversible. You can re-activate any user at any time. Change Password - This lets you specify a new password for a user. Force Password Reset - This sends an email to the user with a special link that will let them choose their own new password.","title":"Viewing and Editing Users"},{"location":"registry/user_management/#adding-new-users","text":"Institutional administrators can add new users at their institition. To add a new user: Click Users in the left nav bar. Click the green Add New User button in the top right corner of the screen. Enter the new user's name, email address and mobile phone number. This person will use the specified email address to log in. The phone number will be used for two-factor authentication, if the user has it enabled. If you want the user to use two-factor authentication, specify a date by which they must activate two-factor authentication. The user will need to log into the system before that date--without two-factor--to set up their multi-step authentication. Select one of the following roles: Institutional Admin - This role has all the privilages of the institutional user, and can add, edit, and deactivate users at your organization. It can also access restricted objects and initiate and approve object and file deletions. Institutional User - This role can send materials to APTrust for ingest, and can view and restore files and objects that are not restricted.","title":"Adding New Users"},{"location":"registry/user_management/#reactivating-deactivated-users","text":"Click the Users link in the left nav bar. Click on the name of the users you want to reactivate. Deactivated users have a non-empty Disabled date describing when their account was disabled. In the screenshot below, the first user in the list was deactivated on January 15, 2021. On the user's detail page, click the Reactivate button.","title":"Reactivating Deactivated Users"},{"location":"registry/work_items/","text":"Work Items Work items are tasks that APTrust systems perform in response to depositor requests. The Work Items list shows the status of your institution's recent requests. You can view the list by clicking the Work Items link in the left navigation bar. You can filter the list to specific actions, statuses, and stages using the controls at the top of the list. To select multiple actions, statuses or stages, hold the Control key while clicking on items in the select list. Click More Filters to see a list of additional filters to help you narrow your search. Actions Work Item actions include the following: Delete - Deleting files or objects from preservation storage. Glacier Restore - This is the first step in restoring objects and files from Glacier. Ingest - Getting new or updated objects into the system. Restore File - Restoring an individual file to a depositor's restoration bucket. Restore Object - Restoring an intellectual object to a depositor's restoration bucket. Stages Available in S3 - A restored file or object is available in the depositor's S3 restoration bucket. Cleanup - The task has completed and the system has cleaned up temporary files. This applies only to ingest and restoration actions. This stage is more meaningful to APTrust internal operations than to depositors. Copy to Staging - Files are being copied to a staging bucket as part of the ingest process. Format Identification - Files being ingested are undergoing format identification against a PRONOM database. Fetch - The system is retrieving a bag from the receiving bucket for ingest, or is retrieving files from preservation storage for restortation. Package - An intellectual object's files are being repackaged into a new bag for restoration. Receive - APTrust has noticed a new bag in a receiving bucket, but has not yet begun to process it for ingest. Record - The system has finished copying a bag's files to preservation storage and is now recording metadata in Registry. Reingest Check - Files being ingested are checked against known files in the Registry to see if they've been ingested before. The system will re-ingest files only if they've changed since the last ingest. Requested - A depositor has requested a restoration or deletion, but the system has not yet begun to process it. Resolve - A task has completed. See Statuses below for the outcome. Restoring - Files are in process of being restored to a depositor's restoration bucket. Storage Validation - The ingest process is verifying that files copied into preservation storage were copied successfully. Store - Files are being copied to long-term preservation. This applies only to ingest. Unpack - Obsolete. This stage remains because it was used in some early ingests between 2015 and 2016. Validate - The system is validating a bag before ingest, or it's validating a bag it has just assembled for restoration. Statuses Cancelled - The task was cancelled by an APTrust administrator. You find an explanation of the cancellation by clicking on the item and reading the Note/Error field. Failed - The task failed. Virtually all failures result from one of the following causes: A depositor submitted an invalid bag for ingest. This is a permanent error and the system will not retry the task until the depositor submits a new version of the bag. The system has run into a temporary problem such as lack of disk space or poor network connection. The system will automatically retry the task. If the task fails repeatedly, an APTrust admin will try to solve the underlying problem and then tell the system to retry the task again. Pending - The system is waiting for available resources to start the next stage of the task. See Stages above. Started - The system has started the current Stage of the task and is still working on it. The Fetch, Validate, Store, Record, and Package stages can take several hours for very large bags. Success - The task completed successfully. Suspended - The task was suspended due to a potential conflict. These items are flagged for administrator review, and an APTrust administrator will determine whether to resume or cancel the item.","title":"Work Items"},{"location":"registry/work_items/#work-items","text":"Work items are tasks that APTrust systems perform in response to depositor requests. The Work Items list shows the status of your institution's recent requests. You can view the list by clicking the Work Items link in the left navigation bar. You can filter the list to specific actions, statuses, and stages using the controls at the top of the list. To select multiple actions, statuses or stages, hold the Control key while clicking on items in the select list. Click More Filters to see a list of additional filters to help you narrow your search.","title":"Work Items"},{"location":"registry/work_items/#actions","text":"Work Item actions include the following: Delete - Deleting files or objects from preservation storage. Glacier Restore - This is the first step in restoring objects and files from Glacier. Ingest - Getting new or updated objects into the system. Restore File - Restoring an individual file to a depositor's restoration bucket. Restore Object - Restoring an intellectual object to a depositor's restoration bucket.","title":"Actions"},{"location":"registry/work_items/#stages","text":"Available in S3 - A restored file or object is available in the depositor's S3 restoration bucket. Cleanup - The task has completed and the system has cleaned up temporary files. This applies only to ingest and restoration actions. This stage is more meaningful to APTrust internal operations than to depositors. Copy to Staging - Files are being copied to a staging bucket as part of the ingest process. Format Identification - Files being ingested are undergoing format identification against a PRONOM database. Fetch - The system is retrieving a bag from the receiving bucket for ingest, or is retrieving files from preservation storage for restortation. Package - An intellectual object's files are being repackaged into a new bag for restoration. Receive - APTrust has noticed a new bag in a receiving bucket, but has not yet begun to process it for ingest. Record - The system has finished copying a bag's files to preservation storage and is now recording metadata in Registry. Reingest Check - Files being ingested are checked against known files in the Registry to see if they've been ingested before. The system will re-ingest files only if they've changed since the last ingest. Requested - A depositor has requested a restoration or deletion, but the system has not yet begun to process it. Resolve - A task has completed. See Statuses below for the outcome. Restoring - Files are in process of being restored to a depositor's restoration bucket. Storage Validation - The ingest process is verifying that files copied into preservation storage were copied successfully. Store - Files are being copied to long-term preservation. This applies only to ingest. Unpack - Obsolete. This stage remains because it was used in some early ingests between 2015 and 2016. Validate - The system is validating a bag before ingest, or it's validating a bag it has just assembled for restoration.","title":"Stages"},{"location":"registry/work_items/#statuses","text":"Cancelled - The task was cancelled by an APTrust administrator. You find an explanation of the cancellation by clicking on the item and reading the Note/Error field. Failed - The task failed. Virtually all failures result from one of the following causes: A depositor submitted an invalid bag for ingest. This is a permanent error and the system will not retry the task until the depositor submits a new version of the bag. The system has run into a temporary problem such as lack of disk space or poor network connection. The system will automatically retry the task. If the task fails repeatedly, an APTrust admin will try to solve the underlying problem and then tell the system to retry the task again. Pending - The system is waiting for available resources to start the next stage of the task. See Stages above. Started - The system has started the current Stage of the task and is still working on it. The Fetch, Validate, Store, Record, and Package stages can take several hours for very large bags. Success - The task completed successfully. Suspended - The task was suspended due to a potential conflict. These items are flagged for administrator review, and an APTrust administrator will determine whether to resume or cancel the item.","title":"Statuses"}]}